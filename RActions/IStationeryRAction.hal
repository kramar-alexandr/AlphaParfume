external function boolean ISetInSet(string, string);
//external inner function Integer DaysInMonth(Integer,Integer);
external function string 255 IGetDepName(string);
remote inner function Boolean POVc_PasteVECode(var record POVc,Boolean);
remote function Boolean tPOVc_PasteArtCode(var record POVc,Integer,Boolean);
remote inner procedure POVc_PasteQuant(var record POVc,Integer);
remote inner function Boolean POVc_PasteLocation(var record POVc);
external function integer IItemCountInStr(string);
external function string 50 IGetItemFromStr(string, integer);
external inner function Boolean GetPMRow(string, var row PMBlock);
external inner function Boolean GetAccCur(string, var string);
external inner function Boolean StockMovVc_PasteArtCode(var record StockMovVc,Integer,Integer,Boolean);
external inner function string 255 FindINObjects(string,string);
external inner procedure ExtractObj(string,var Integer,var string);
remote inner function Boolean SDVc_PasteQty(var record SDVc,Integer);
//===============================================
//Присутствует ли товар в планах указанного года
function boolean ArtCodeInStrnPlan(record IStnrListBlock SLb, string ArtCode, integer Year)
begin
  row IStnrListBlock SLbrw;
  integer i;
  boolean found;

  for (i=0; (i < MatRowCnt(SLb)) and not found; i=i+1)
    begin
      MatRowGet(SLb, i, SLbrw);
      found = ISetInSet(ArtCode, SLbrw.ArtCode) and (Year >= GetYear(SLbrw.StartDate)) and (Year <= GetYear(SLbrw.EndDate));
    end;
  ArtCodeInStrnPlan = found;
  Return;
end;

//===============================================
//Заполнение матрицы планов товарами из настройки
global
procedure IStnrPlanFill(var record IStnrPlanVc SPr)
begin
  record IStnrListBlock SLb;
  record tINKVc INKr;
  record INVc INr;
  row IStnrPlanVc SPrw;
  boolean cont;

  BlockLoad(SLb);
 
  //Очищаем старые позиции
  while (MatRowCnt(SPr) > 0)
    begin
      MatRowDelete(SPr, 0);
    end;
  //Заполняем новыми
  ResetLoop(INKr);
  cont = true;
  INKr.Terminated = 0;
  while LoopKey("Terminated", INKr, 1, cont)
    begin
      cont = (INKr.Terminated == 0);
      if cont then
        begin
        //  if ArtCodeInStrnPlan(SLb, INKr.Code, SPr.Year) then
            begin
			SPrw.ArtCode = INKr.Code;
			SPrw.ArtName = INKr.Name;
			SPrw.Price1 = INKr.Price;
			SPrw.POCode1 = INKr.VECode;
			SPrw.POName1 = INKr.VEName;
            MatRowPut(SPr, MatRowCnt(SPr), SPrw);
            end;
        end;
    end;
  Return;
end;

//=============================================== IStnrPlanVcRecord...
global
function Longint IStnrPlanVcRecordDefaults(var record IStnrPlanVc SPr, record IStnrPlanVc SP2r, LongInt stat, LongInt long4)
begin
Longint Res;
record UserVc USr;
boolean TrHs;

SetLangMode(LangRussian,"RUS",2);

if (SingleUserMode) then 
	begin
	SPr.SerNr = NextSerNr("IStnrPlanVc", CurrentDate, -1, false, "");
	end
else
	begin
	SPr.SerNr = -1;
	end;

IStnrPlanVcRecordDefaults = res;
RETURN;
end;

//=====================================================

global
function LongInt IStnrPlanVcRecordDuplicate(var record IStnrPlanVc SPr, record IStnrPlanVc SP2r, LongInt stat, LongInt long4)
BEGIN
LongInt res;
record UserVc USr;
integer i;
SetLangMode(LangRussian,"RUS",2);
if (SingleUserMode) then 
  begin
  SPr.SerNr = NextSerNr("IStnrPlanVc", CurrentDate, -1, false, "");
  end 
else
  begin
  SPr.SerNr = -1;
  end;
IStnrPlanVcRecordDuplicate = res; 
RETURN;
END;

global
updating function LongInt IStnrPlanVcRecordRemoveTest(var record IStnrPlanVc SPr, record IStnrPlanVc SP2r, LongInt stat, LongInt long4)
BEGIN
record UserVc USr;

IStnrPlanVcRecordRemoveTest = 1;
USr.Code = CurrentUser;
ReadFirstMain(USr, 1, True);
if (not(SetInSet(USr.AccessGroup, "UCHR,ADMIN,OFMAN,OFFI"))) then 
  begin
  IStnrPlanVcRecordRemoveTest = 0;
  end;
RETURN;
END;

//=====================================================

global
function LongInt IStnrPlanVcRecordCheck(var record IStnrPlanVc SPr, record IStnrPlanVc SP2r, LongInt stat, LongInt long4)
BEGIN
LongInt res;
integer insertmode, updatemode,i,sum;
record UserVc USr;
row IStnrPlanVc SPrw;
record IStnrPlanVc SP1r;

SetLangMode(LangRussian, "RUS", 2);
res = 0;     
insertmode = 1;
updatemode = 2;

USr.Code = CurrentUser;
ReadFirstMain(Usr, 1, True);

if (stat <> updatemode) and (SPr.SerNr < 1) then
  begin
  SPr.SerNr = NextSerNr("IStnrPlanVc", CurrentDate, -1, false, "");
  end;
if (stat == updatemode) and (SPr.SerNr < 1) then
  begin
  res = -1;
  end;
  
  
if (SPr.Year < 2013) then
    begin
      RecordCheckError(1499, "Неверно указан год", -1, "Year");
      res = -1;
    end;


SP1r.Year = SPr.Year;
SP1r.DepCode = SPr.DepCode ;
SP1r.ObjPODR = SPr.ObjPODR;
SP1r.ObjUZTR = SPr.ObjUZTR;
SP1r.ObjTIP = SPr.ObjTIP;
if ReadFirstKey("MegaKey", SP1r, 5, true) and (SP1r.SerNr <> SPr.SerNr) then
	begin
	RecordCheckError(1499, "Такая запись уже существует", -1, "ObjTIP");
	res = -1;
	end;
 
  IStnrPlanVcRecordCheck = res;
RETURN;
end;

//=============================================== Заявки

//===============================================
//Заполнение матрицы заявок товарами из планов
global
procedure IStnrOrdPlanFill(var record IStnrOrdVc ISOr)
begin
record IStnrPlanVc SPr;
row IStnrPlanVc SPrw;
row IStnrOrdVc ISOrw;
boolean cont;
integer i;

//Очищаем старые позиции
while (MatRowCnt(ISOr) > 0)
	begin
	MatRowDelete(ISOr, 0);
	end;
//Заполняем новыми
ResetLoop(SPr);
cont = true;

SPr.Year = GetYear(ISOr.OrdPlanDate);
SPr.DepCode = ISOr.DepCode ;
SPr.ObjPODR = ISOr.ObjPODR;
SPr.ObjUZTR = ISOr.ObjUZTR;
SPr.ObjTIP = ISOr.ObjTIP;
if ReadFirstKey("MegaKey", SPr, 5, true) then
	begin
// SPr.DepCode = ISOr.DepCode;
// SPr.Year = GetYear(ISOr.OrdPlanDate);
// while (loopkey("DepCode:" & GetYear(ISOr.OrdPlanDate), SPr, 1, true)) 
	//begin
	if ISOr.ObjPODR == SPr.ObjPODR and	ISOr.ObjUZTR == SPr.ObjUZTR and	ISOr.ObjTIP == SPr.ObjTIP then //and ISOr.ObjFN == SPr.ObjFN
		begin
		//ISOr.ObjStr = SPr.ObjStr; ЗАМЕНИТЬ НА ОБЪЕКТЫ ПО ТИПАМ, ДОПИСАТЬ ИМ SCLass
		ISOr.SummM = StringToVal(GetFieldValueByName(SPr, "Summ" & GetMonth(ISOr.OrdPlanDate), -1), M4Val); //ISOr.ObjStr;
		ISOr.SummFM = StringToVal(GetFieldValueByName(SPr, "SummF" & GetMonth(ISOr.OrdPlanDate), -1), M4Val);//ISOr.ObjStr;
		for (i = 0; i < MatRowCnt(SPr); i = i + 1)
			begin
			MatRowGet(SPr, i, SPrw);
			ISOrw.ArtCode = SPrw.ArtCode;
			ISOrw.ArtName = SPrw.ArtName;
			ISOrw.Price = StringToVal(GetFieldValueByName(SPr, "Price" & GetMonth(ISOr.OrdPlanDate), i), M4Val); 
			ISOrw.Qnt = StringToVal(GetFieldValueByName(SPr, "Plan" & GetMonth(ISOr.OrdPlanDate), i), M4Val); 
			ISOrw.Plan = StringToVal(GetFieldValueByName(SPr, "Plan" & GetMonth(ISOr.OrdPlanDate), i), M4Val); 
			MatRowPut(ISOr, i, ISOrw);
			end;
		end;
	end;	
  Return;
end;
  
//===============================================

global
function Longint IStnrOrdVcRecordDefaults(var record IStnrOrdVc ISOr, record IStnrOrdVc ISO2r, LongInt stat, LongInt long4)
begin
Longint Res;
record UserVc USr;
boolean TrHs;

SetLangMode(LangRussian,"RUS",2);

USr.Code = CurrentUser;
readfirstmain(USr, 1, true);

ISOr.CurSign = CurrentUser;
ISOr.OrdDate = CurrentDate;
ISOr.OrdPlanDate = AddDay(CurrentDate,DaysInMonth(GetYear(CurrentDate),GetMonth(CurrentDate))-GetDay(CurrentDate) + 1);
ISOr.DepCode = USr.Department;
ISOr.DepName = IGetDepName(ISOr.DepCode);
ISOr.POFlag = 0;
ISOr.ConfirmedFlag = 0;
ISOr.OrderedFlag = 0;

//IStnrOrdPlanFill(ISOr);
IStnrOrdVcRecordDefaults = res;
RETURN;
end;
//==============================================
global
function boolean tFindDblISOr(string DepCode, date OrdPlanDate, LongInt SerNr)
begin
Boolean res, TrHr1;
record IStnrOrdVc ISO2r;

res = false;
resetloop(ISO2r);
TrHr1 = true;
ISO2r.OrdPlanDate = OrdPlanDate;
ISO2r.DepCode = DepCode;
while (LoopKey("OrdPlDate", ISO2r , 2, TrHr1))
	begin
	if ISO2r.DepCode == DepCode and ISO2r.OrdPlanDate == OrdPlanDate  and ISO2r.SerNr <> SerNr then
		begin
		res = true;
		end;
	end;

		
tFindDblISOr = res;
  Return;
end;

//===============================================
global
function LongInt IStnrOrdVcRecordDuplicate(var record IStnrOrdVc ISOr, record IStnrOrdVc ISO2r, LongInt stat, LongInt long4)
BEGIN
LongInt res;
record UserVc USr;
integer i;
SetLangMode(LangRussian,"RUS",2);
if (SingleUserMode) then 
  begin
  ISOr.SerNr = NextSerNr("IStnrOrdVc", CurrentDate, -1, false, "");
  end 
else
  begin
  ISOr.SerNr = -1;
  end;
  
ISOr.OrdDate = CurrentDate;
ISOr.OrdPlanDate = AddDay(CurrentDate,DaysInMonth(GetYear(CurrentDate),GetMonth(CurrentDate))-GetDay(CurrentDate) + 1);
ISOr.OrderedFlag = 0;
ISOr.OrderedSign = "";
ISOr.ConfirmedFlag = 0; 
ISOr.ConfirmedSign = "";
ISOr.POFlag = 0;
ISOr.POSign = "";
ISOr.SDFlag = 0; 
IStnrOrdVcRecordDuplicate = res; 
RETURN;
END;

global
updating function LongInt IStnrOrdVcRecordRemoveTest(var record IStnrOrdVc ISOr, record IStnrOrdVc ISO2r, LongInt stat, LongInt long4)
BEGIN
record UserVc USr;

IStnrOrdVcRecordRemoveTest = 1;
USr.Code = CurrentUser;
ReadFirstMain(USr, 1, True);

if (ISOr.POFlag == 1) or (ISOr.ConfirmedFlag == 1) or (ISOr.OrderedFlag == 1) then  //(not UserCanAction("UnOKAll",True)) and 
  begin
  IStnrOrdVcRecordRemoveTest = 0;
  end;
RETURN;
END;

global
function boolean tFindChange(record IStnrOrdVc ISOr, record IStnrOrdVc ISO2r)
begin
row IStnrOrdVc ISOrw,ISO2rw;
boolean res;
integer RwCnt;

res = false;
for (RwCnt = 0; RwCnt < MatRowCnt(ISOr); RwCnt = RwCnt + 1)
	begin
	matRowGet(ISOr, RwCnt , ISOrw);
	matRowGet(ISO2r, RwCnt , ISO2rw);
	if  (ISOrw.Qnt <> ISO2rw.Qnt) then
		begin
		res = true;
		end;
	end;

tFindChange = res;
return;
end;
//============================================
global
function boolean tOtherField(record IStnrOrdVc ISO2r, record IStnrOrdVc ISOr)
begin
boolean res;
row IStnrOrdVc ISOrw, ISO2rw;
integer RwCnt;

res = false;

res = (ISO2r.DepCode == ISOr.DepCode) and (ISO2r.ObjPODR == ISOr.ObjPODR) and (ISO2r.ObjUZTR == ISOr.ObjUZTR)
		and (ISO2r.ObjFN == ISOr.ObjFN) and (ISO2r.ObjTIP == ISOr.ObjTIP)
		and (ISO2r.POFlag <> 1) and (ISO2r.ConfirmedFlag == 1) and (ISO2r.OrderedFlag == 1)
		and (ISO2r.ConfirmedFlag == ISOr.ConfirmedFlag) and (ISO2r.OrderedFlag == ISOr.OrderedFlag);
		
if res == true then
	begin
	for (RwCnt = 0; RwCnt < MatRowCnt(ISOr); RwCnt = RwCnt + 1)
		begin
		matRowGet(ISOr, RwCnt , ISOrw);
		matRowGet(ISO2r, RwCnt , ISO2rw);
		if (ISOrw.Qnt <> ISO2rw.Qnt) then
			begin
			res = false;
			end;
		end;		
	end;		
		
tOtherField = res;
return;
end;

function boolean tSaveOrd(record IStnrOrdVc ISOr)
begin
//tSaveOrd = (ISOr.SummFM > ISOr.SummM);
return;
end;

//============================================
global
function LongInt IStnrOrdVcRecordCheck(var record IStnrOrdVc ISOr, record IStnrOrdVc ISO2r, LongInt stat, LongInt long4)
BEGIN
LongInt res;
integer insertmode, updatemode, RwCnt;
record UserVc USr;
row IStnrOrdVc ISOrw;
boolean bool;

SetLangMode(LangRussian, "RUS", 2);
res = 0;     
insertmode = 1;
updatemode = 2;

USr.Code = CurrentUser;
ReadFirstMain(Usr, 1, True);

if (stat <> updatemode) and (ISOr.SerNr < 1) then
	begin
	ISOr.SerNr = NextSerNr("IStnrOrdVc", CurrentDate, -1, false, "");
	end;

	
bool = true;
for (RwCnt = 0; RwCnt < MatRowCnt(ISOr); RwCnt = RwCnt + 1)
	begin
	matRowGet(ISOr, RwCnt , ISOrw);
	if (ISOrw.Zak < 0) and (ISOrw.Qnt > 0) then
		begin
		bool = false;
		end;
	end;
	
if (ISO2r.POFlag == 1) and (not(SetInSet(USr.AccessGroup, "ADMIN"))) then //
	begin
	res = -1;
	end;

if (ISO2r.ConfirmedFlag == 1) and (ISOr.ConfirmedFlag == 1) and not(tOtherField(ISO2r,ISOr)) then
	begin
	res = -1;
	end;	

if (ISO2r.ConfirmedFlag == 1) and (ISOr.ConfirmedFlag <> 1) and(not(SetInSet(USr.AccessGroup, "UCHR,ADMIN,OFMAN,OFFI"))) then
	begin
	res = -1;
	end;
	
if (bool) and tOtherField(ISO2r,ISOr) then //
	begin	
	ISOr.POFlag = 1;	
	//res = 0;
	end;
	
if (stat == updatemode) and (ISOr.SerNr < 1) then
	begin
	res = -1;
	end;
	
if ISO2r.OrderedFlag <> 0 and tFindChange(ISOr, ISO2r) then
	begin
	res = -1;
	end;
	
if (ISOr.ConfirmedFlag <> ISO2r.ConfirmedFlag) and ((not(SetInSet(USr.AccessGroup, "UCHR,ADMIN,OFMAN,OFFI"))) or (ISOr.OrderedFlag <> 1) ) then
	begin
	res = -1;
	end;	
	
if blank(ISOr.ObjFN) then
	begin
	RecordCheckError(1499, "Объект FN2 не может быть незаполненным", -1, "ObjFN");	
	res = -1;
	end;	
/*
if ISO2r.OrderedFlag <> ISOr.OrderedFlag  and ISOr.OrderedFlag == 1 then
	begin
	if tSaveOrd(ISOr) then
		begin
		res = -1;
		end;
	end;	
	*/
// if 	tFindDblISOr (ISOr.DepCode, ISOr.OrdPlanDate, ISOr.SerNr) then        НУЖНО ЗАМЕНИТЬ НА ПРОВЕРКУ ПО ОБЪЕКТАМ
	// begin
	// res = -1;
	// MessageBox(0, "На данный период запись уже существует");
	// end;	    
  IStnrOrdVcRecordCheck = res;
RETURN;
end;

//===============================================
global
updating
procedure tAddCheck(var record TempVc Listr, string SerNr)
begin
record IStnrOrdVc ISOr, ISO2r;
Integer RwCnt;
row TempVc Listrw;

for (RwCnt = 0; RwCnt < MatRowCnt(Listr); RwCnt = RwCnt + 1)
	begin
	matRowGet(Listr, RwCnt , Listrw);
	ISOr.SerNr = Listrw.f2;
	if readfirstmain(ISOr, 1, true) then
		begin
		ISO2r.SerNr = ISOr.SerNr;
		readfirstmain(ISO2r, 1, true);
		// ISOr.POFlag = 1;
		// ISOr.POSign = CurrentUser;	
		// ISOr.POSerNr = SerNr;
		RecordUpdate(ISO2r, ISOr, true);
		end;
	end;	
RETURN;
end;

//===============================================
global
updating
procedure tListAddCheck( string SerNr)
BEGIN
record IStnrOrdVc ISOr;
Integer wn,nwn, RwCnt;
row IStnrOrdVc ISOrw;
record TempVc Listr;
row TempVc Listrw;
Boolean TrHr,TrHr1;

RwCnt = 0;
resetLoop(ISOr);
ISOr.POFlag = 0;
ISOr.ConfirmedFlag = 1;
TrHr1 = true;	
while (LoopKey("ConfPOFlag", ISOr , 2, TrHr1))
	begin
	TrHr1 = ((ISOr.ConfirmedFlag == 1) and (ISOr.POFlag == 0));
	if (TrHr1) then
		begin	
		Listrw.f2 = ISOr.SerNr;
		MatRowPut(Listr, RwCnt, Listrw);
		RwCnt = RwCnt + 1;
		end;
	end;
	
tAddCheck(Listr, SerNr);	
RETURN;
end;

//===============================================
global
updating
procedure tSummAllRec(var record TempVc Listr, string SerNr)
BEGIN
record IStnrOrdVc ISOr;
Integer wn,nwn, RwCnt;
row IStnrOrdVc ISOrw;
row TempVc Listrw;
Boolean TrHr,TrHr1,bool;
record tOrdersVc TOr;

bool = false;
resetLoop(ISOr);
ISOr.POFlag = 0;
ISOr.ConfirmedFlag = 1;
TrHr = true;	
while (LoopKey("ConfPOFlag", ISOr , 2, TrHr))
	begin
	TrHr = ((ISOr.ConfirmedFlag == 1)  and (ISOr.POFlag == 0));
	if  (TrHr) then
		begin	
		for (RwCnt = 0; RwCnt < MatRowCnt(ISOr); RwCnt = RwCnt + 1)
			begin
			matRowGet(ISOr, RwCnt , ISOrw);
			if (ISOrw.Zak <= 0) then
				begin
				matRowGet(Listr, RwCnt , Listrw);
				Listrw.f2 = ISOrw.ArtCode;
				Listrw.f3 = StringToVal(Listrw.f3, M4Val) + ISOrw.Qnt;
				MatRowPut(Listr, RwCnt, Listrw);
				bool = true;
				end;
			end;
		if	bool then
			begin
			RecordNew(TOr);
			TOr.SerNr = NextSerNr("tOrdersVc", CurrentDate, -1, false, "");
			TOr.SerNrPO = SerNr;
			TOr.SerNrISO = ISOr.SerNr;
			RecordStore(TOr,true);
			end;
		end;
	end;

 return;
end;	


//=========================================================================

procedure tFindAtr(record IStnrOrdVc ISOr, string ArtCode, longInt SerNr, integer del)
begin
integer ii;
row IStnrOrdVc ISOrw;

for (ii = 0; ii < MatRowCnt(ISOr); ii = ii + 1)
	begin
	matRowGet(ISOr, ii , ISOrw);
	if ISOrw.ArtCode == ArtCode then
		begin
		ISOrw.Zak = SerNr;
		matrowput(ISOr, ii, ISOrw);	
		end;
	end;
  return;
end;


//=========================================================================

global
updating procedure AddNrRowPO1(string SerNrISO, string SerNrPO)
begin
LongInt res;
integer cnt, i, ii, RwCnt;
boolean bool;
record IStnrOrdVc ISOr, ISO2r;
row IStnrOrdVc ISOrw;
longInt SerNr;
row POVc POrw;
record tOrdersVc TOr;
record POVc POr;

POr.SerNr = SerNrPO;
ReadFirstMain(POr, 1, true)

ISOr.SerNr = SerNrISO;
if ReadFirstMain(ISOr, 1, true) then
	begin
	bool = true;
	for (RwCnt = 0; RwCnt < MatRowCnt(POr); RwCnt = RwCnt + 1)
		begin
		matRowGet(POr, RwCnt , POrw);
		tFindAtr(ISOr, POrw.ArtCode, POr.SerNr, 1);
		end;
	ISO2r.SerNr = ISOr.SerNr;
	ReadFirstMain(ISO2r, 1, true);
	recordUpdate(ISO2r, ISOr, true);	
	end;
  return;
end;
//=========================================================================

global
updating procedure AddNrRowPO(longInt SerNr)
begin
LongInt res;
integer cnt, i, ii, RwCnt;
boolean bool, TrHr;
record IStnrOrdVc ISOr, ISO2r;
row IStnrOrdVc ISOrw;
row POVc POrw;
record tOrdersVc TOr;

TOr.SerNrPO = SerNr;
TrHr = true;
while(loopKey("SerNrPO", TOr, 1, TrHr))
	begin
	TrHr = (TOr.SerNrPO == SerNr);
	if TrHr then
		begin
		AddNrRowPO1(TOr.SerNrISO, TOr.SerNrPO);
		end;
	end;
return;
end;

// global
// updating
// function Boolean MakePOFromISO(var record POVc POr)
// begin 
// Boolean res;
// Integer wn, nwn, RwCnt, nr;
// record TempVc Listr, List1r;
// row POVc POrw;
// row  TempVc Listrw, List1rw;
// record POVc PO2r;

// // record tOrdersVc TOr;

// // while (LoopMain(TOr, 1, true))
	// // begin
	// // RecordDelete(TOr);
	// // end;


// RecordNew(POr);
// POr.SerNr = NextSerNr("POVc", CurrentDate, -1, false, "");
// // POr.VECode = "1040033";
// // POVc_PasteVECode(POr,true);
// POr.Location = "A001";
// POVc_PasteLocation(POr);
// recordStore(POr, false);
// tSummAllRec(Listr, POr.SerNr);
// if MatRowCnt(Listr) > 0 then
	// begin
	// nr = 0;
	// for (RwCnt = 0; RwCnt < MatRowCnt(Listr); RwCnt = RwCnt + 1)
		// begin
		// matRowGet(Listr, RwCnt , Listrw);
		// if (StringToVal(Listrw.f3, M4Val) > 0) then
			// begin
			// POrw.ArtCode = Listrw.f2;
			// POrw.Quant = StringToVal(Listrw.f3, M4Val); // StringToInt(Listrw.f3);//, M4Val);
			// MatRowPut(POr, nr, POrw);	
			// POVc_PasteArtCode(POr,nr,false);
			// POVc_PasteQuant(POr,nr);
			// nr = nr + 1;
			// end;
		// end;
	// PO2r.SerNr = POr.SerNr;	
	// readfirstmain(PO2r, 1, true);
	// RecordUpdate(PO2r, POr, false);
	// tListAddCheck(POr.SerNr);	
    // AddNrRowPO(POr.SerNr);
	// res = true;
	// end
// else
	// begin
	// RecordDelete(POr);
	// MessageBox(0, "Все заявки оформлены в заказах поставщикам!");
	// res = false;
	// end;



// MakePOFromISO = res;
		
  // return;
// end;

global
function Boolean SameVE(string f2, string VE)
begin
record tINKVc INr;
Boolean res;

INr.Code = f2;
ReadFirstMain(INr, 1, true);
res = (INr.VECode == VE);

SameVE = res;
return;
end;

global
updating
function Boolean tMakePO(String VE)
begin 
Boolean res;
Integer wn, nwn, RwCnt, nr;
record TempVc Listr, List1r;
row POVc POrw;
row  TempVc Listrw, List1rw;
record POVc POr, PO2r;

// record tOrdersVc TOr;

// while (LoopMain(TOr, 1, true))
	// begin
	// RecordDelete(TOr);
	// end;


RecordNew(POr);
POr.SerNr = NextSerNr("POVc", CurrentDate, -1, false, "");
POr.VECode = VE;
POVc_PasteVECode(POr,true);
POr.Location = "A001";
POVc_PasteLocation(POr);
recordStore(POr, false);
tSummAllRec(Listr, POr.SerNr);
if MatRowCnt(Listr) > 0 then
	begin
	nr = 0;
	for (RwCnt = 0; RwCnt < MatRowCnt(Listr); RwCnt = RwCnt + 1)
		begin
		matRowGet(Listr, RwCnt , Listrw);
		if (StringToVal(Listrw.f3, M4Val) > 0) and SameVE(Listrw.f2, VE) then
			begin
			POrw.ArtCode = Listrw.f2;
			POrw.Quant = StringToVal(Listrw.f3, M4Val); // StringToInt(Listrw.f3);//, M4Val);
			MatRowPut(POr, nr, POrw);	
			tPOVc_PasteArtCode(POr,nr,false);
			POVc_PasteQuant(POr,nr);
			nr = nr + 1;
			end;
		end;
	PO2r.SerNr = POr.SerNr;	
	readfirstmain(PO2r, 1, true);
	RecordUpdate(PO2r, POr, false);
	tListAddCheck(POr.SerNr);	
    AddNrRowPO(POr.SerNr);
	res = true;
	end
else
	begin
	RecordDelete(POr);
	MessageBox(0, "Все заявки оформлены в заказах поставщикам!");
	res = false;
	end;



tMakePO = res;
		
  return;
end;

global
updating
function Boolean CrStrVE(var string ZakNrS)//, var record SDVc SDr
begin 
Boolean res;
Integer wn, nwn, RwCnt, nr;
record TempVc List1r;
row POVc POrw;
row  TempVc Listrw, List1rw;
record SDVc SD2r;//SDr, 
record IStnrOrdVc ISOr, ISO2r;
Boolean TrHr;
row IStnrOrdVc ISOrw;
record tINKVc INr;

SetLangMode(LangRussian, "RUS", 2);

res = false;
resetLoop(INr);
TrHr = true;	
INr.Terminated = 0;
while (LoopKey("Terminated", INr , 1, TrHr))
	begin
	TrHr = (INr.Terminated == 0) ;
	if  (TrHr) then
		begin	
		if nonblank(ZakNrS) then
			begin
			if not(SetInSet(INr.VECode,ZakNrS)) then
				begin
				ZakNrS = ZakNrS & "," & INr.VECode;
				end;
			end
		else
			begin
			ZakNrS = INr.VECode;
			end;
		res = true;	
		end;	
	end;

CrStrVE = res;
		
  return;
end;


global
updating
function Boolean MakePOFromISO(String VE, var record POVc POr)
begin 
Boolean res;
Integer wn, nwn, RwCnt, nr;
record TempVc Listr, List1r;
row POVc POrw;
row  TempVc Listrw, List1rw;
record POVc PO2r;

// record tOrdersVc TOr;

// while (LoopMain(TOr, 1, true))
	// begin
	// RecordDelete(TOr);
	// end;


RecordNew(POr);
POr.SerNr = NextSerNr("POVc", CurrentDate, -1, false, "");
POr.VECode = VE;
POVc_PasteVECode(POr,true);
POr.Location = "A001";
POVc_PasteLocation(POr);
recordStore(POr, false);
tSummAllRec(Listr, POr.SerNr);
if MatRowCnt(Listr) > 0 then
	begin
	nr = 0;
	for (RwCnt = 0; RwCnt < MatRowCnt(Listr); RwCnt = RwCnt + 1)
		begin
		matRowGet(Listr, RwCnt , Listrw);
		if (StringToVal(Listrw.f3, M4Val) > 0) and SameVE(Listrw.f2, VE) then
			begin
			POrw.ArtCode = Listrw.f2;
			POrw.Quant = StringToVal(Listrw.f3, M4Val); // StringToInt(Listrw.f3);//, M4Val);
			MatRowPut(POr, nr, POrw);	
			tPOVc_PasteArtCode(POr,nr,false);
			POVc_PasteQuant(POr,nr);
			nr = nr + 1;
			end;
		end;
	PO2r.SerNr = POr.SerNr;	
	readfirstmain(PO2r, 1, true);
	RecordUpdate(PO2r, POr, false);
	tListAddCheck(POr.SerNr);	
    AddNrRowPO(POr.SerNr);
	res = true;
	end
else
	begin
	RecordDelete(POr);
	MessageBox(0, "Все заявки оформлены в заказах поставщикам!");
	res = false;
	end;
	
MakePOFromISO = res;
		
  return;
end;

global
function val tSumK(record IStnrPlanVc SPr, string fieldname) // сумма по плану
begin 
row IStnrPlanVc SPrw;
val Sum;
Integer RwCnt;

Sum = 0;
for (RwCnt = 0; RwCnt < MatRowCnt(SPr); RwCnt = RwCnt + 1)
	begin	  
	matRowGet(SPr, RwCnt , SPrw);
	Sum = Sum + StringToVal(GetFieldValueByName(SPr, fieldname, RwCnt), M4Val);
	end;  
tSumK = Sum;		
  return;
end;

global
function val tSumF(record IStnrPlanVc SPr, string fieldname) // сумма по плану
begin 
row IStnrPlanVc SPrw;
val Sum;
Integer RwCnt;

Sum = 0;
for (RwCnt = 0; RwCnt < MatRowCnt(SPr); RwCnt = RwCnt + 1)
	begin	  
	matRowGet(SPr, RwCnt , SPrw);
	If (fieldname == "Plan10") or (fieldname == "Plan11") or (fieldname == "Plan12") then
		begin
		Sum = Sum + StringToVal(GetFieldValueByName(SPr, fieldname, RwCnt), M4Val) * StringToVal(GetFieldValueByName(SPr, "Price" & Right(fieldname, 2), RwCnt), M4Val);
		end
	else
		begin
		Sum = Sum + StringToVal(GetFieldValueByName(SPr, fieldname, RwCnt), M4Val) * StringToVal(GetFieldValueByName(SPr, "Price" & Right(fieldname, 1), RwCnt), M4Val);
		end;
	end;  
tSumF = Sum;		
  return;
end;

global
function val tSumFISO(record IStnrOrdVc ISOr)
begin 
row IStnrOrdVc ISOrw;
val Sum;
Integer RwCnt;

Sum = 0;
for (RwCnt = 0; RwCnt < MatRowCnt(ISOr); RwCnt = RwCnt + 1)
	begin	  
	matRowGet(ISOr, RwCnt , ISOrw);
	Sum = Sum + ISOrw.Qnt * ISOrw.Price;
	end;  

tSumFISO = Sum;		
  return;
end;
//========================================================================

global
updating
function Boolean tRePrice()
begin
record IStnrPlanVc SPr, SP2r;
row IStnrPlanVc SPrw;
record tINKVc INr;
val Sum;
Integer RwCnt,i,qu;
string 20 fieldname;

resetLoop(SPr);
while (LoopMain(SPr, 1, true))
	begin
	for (RwCnt = 0; RwCnt < MatRowCnt(SPr); RwCnt = RwCnt + 1)
		begin	  
		matRowGet(SPr, RwCnt, SPrw);
		INr.Code = SPrw.ArtCode;
		ReadFirstMain(INr, 1, true);
		if GetMonth(CurrentDate) == 12 then
			begin
			qu = 1;
			end
		else
			begin
			qu = GetMonth(CurrentDate) + 1;
			end;
		SetFieldValueByName(SPr, "Price" & qu, INr.Price, RwCnt); 	
		SetFieldValueByName(SPr, "POCode" & qu, INr.VECode, RwCnt); 	
		SetFieldValueByName(SPr, "POName" & qu, INr.VEName, RwCnt); 	
		//SPrw.Price2 = INr.Price;
		//matrowput(SPr, RwCnt, SPrw);
		end;  
	for (i = 1; i <= 12; i = i + 1)
		begin	
		fieldname = "Plan" & i;	
		SetFieldValueByName(SPr, "SummF" & i, tSumF(SPr, fieldname), -1); 	
		end;
	SP2r.SerNr = SPr.SerNr;
	ReadFirstMain(SP2r, 1, true);
	recordUpdate(SP2r, SPr, false);
	end;
	
	tRePrice = true;
  return;
end;
//====================================================================

global
updating
function Boolean tRePriceISO()
begin
record IStnrOrdVc ISOr, ISO2r;
row IStnrOrdVc ISOrw;
//record INVc INr;
record tINKVc INr;
val Sum;
Integer RwCnt,i;
string 20 fieldname;
boolean TrHr;


resetLoop(ISOr);
ISOr.POFlag = 0;
TrHr = true;	
while (LoopKey("POFlag", ISOr , 1, TrHr))
	begin
	Sum = 0;
	TrHr = (ISOr.POFlag == 0);
	if  (TrHr) then
		begin	
		for (RwCnt = 0; RwCnt < MatRowCnt(ISOr); RwCnt = RwCnt + 1)
			begin
			matRowGet(ISOr, RwCnt , ISOrw);
			INr.Code = ISOrw.ArtCode;
			ReadFirstMain(INr, 1, true);
			ISOrw.Price = INr.Price;
			matrowput(ISOr, RwCnt, ISOrw);
			Sum = Sum + ISOrw.Qnt * ISOrw.Price;
			end;
		ISOr.SummFM = Sum;
		ISO2r.SerNr = ISOr.SerNr;
		ReadFirstMain(ISO2r, 1, true);
		recordUpdate(ISO2r, ISOr, true);	
		end;
	end;
	
	tRePriceISO = true;
  return;
end;


//=====================================
global
updating
function Boolean tDelZak()
begin
record IStnrOrdVc ISOr, ISO2r;
row IStnrOrdVc ISOrw;
boolean bool;
integer cnt, i, ii, RwCnt;


while (LoopMain(ISOr, 1, true))
	begin
	for (RwCnt = 0; RwCnt < MatRowCnt(ISOr); RwCnt = RwCnt + 1)
		begin
		matRowGet(ISOr, RwCnt , ISOrw);
		ISOrw.Zak = -1;
		matRowPut(ISOr, RwCnt , ISOrw);
		end;
	ISO2r.SerNr = ISOr.SerNr;
	ReadFirstMain(ISO2r, 1, true);
	recordUpdate(ISO2r, ISOr, true);	
	end;

return;
end;

global
updating procedure DelNrPO(record tOrdersVc TOr, string ArtCode, integer del)
begin
record IStnrOrdVc ISOr, ISO2r;
row IStnrOrdVc ISOrw;
boolean bool;
integer cnt, i, ii, RwCnt;


ISOr.SerNr = TOr.SerNrISO;
if ReadFirstMain(ISOr, 1, true) then
	begin
	bool = true;
	for (RwCnt = 0; RwCnt < MatRowCnt(ISOr); RwCnt = RwCnt + 1)
		begin
		matRowGet(ISOr, RwCnt , ISOrw);
		if ISOrw.Zak == TOr.SerNrPO and ISOrw.ArtCode == ArtCode then //
			begin
			ISOrw.Zak = -1;
			matRowPut(ISOr, RwCnt , ISOrw);
			end;
		end;
	ISOr.POFlag = 0;
	ISO2r.SerNr = ISOr.SerNr;
	ReadFirstMain(ISO2r, 1, true);
	recordUpdate(ISO2r, ISOr, false);	
	end;


return;
end;
//========================================================

global
updating procedure tDelRowPOFromISO(LongInt SerNr, string ArtCode)
begin
LongInt res;
record tOrdersVc TOr;
boolean bool, TrHr;


TOr.SerNrPO = SerNr;
TrHr = true;
while(loopKey("SerNrPO", TOr, 1, TrHr))
	begin
	TrHr = (TOr.SerNrPO == SerNr);
	if TrHr then
		begin
		DelNrPO(TOr, ArtCode, 0);
		end;
	end;

  RETURN;
END;


global
updating procedure DelNrPODel(record tOrdersVc TOr)
begin
record IStnrOrdVc ISOr, ISO2r;
row IStnrOrdVc ISOrw;
boolean bool;
integer cnt, i, ii, RwCnt;


ISOr.SerNr = TOr.SerNrISO;
if ReadFirstMain(ISOr, 1, true) then
	begin
	bool = true;
	for (RwCnt = 0; RwCnt < MatRowCnt(ISOr); RwCnt = RwCnt + 1)
		begin
		matRowGet(ISOr, RwCnt , ISOrw);
		if ISOrw.Zak == TOr.SerNrPO then 
			begin
			ISOrw.Zak = -1;
			matRowPut(ISOr, RwCnt , ISOrw);
			end;
		end;
	ISOr.POFlag = 0;	
	ISO2r.SerNr = ISOr.SerNr;
	ReadFirstMain(ISO2r, 1, true);
	recordUpdate(ISO2r, ISOr, false);	
	end;

return;
end;
//===================================================

global
updating function LongInt POVcRecordRemoveAfter(var record POVc POr,record POVc PO2r,LongInt stat,LongInt long4)
BEGIN
LongInt res;
record tOrdersVc TOr;
boolean bool, TrHr;


TOr.SerNrPO = POr.SerNr;
TrHr = true;
while(loopKey("SerNrPO", TOr, 1, TrHr))
	begin
	TrHr = (TOr.SerNrPO == POr.SerNr);
	if TrHr then
		begin
		DelNrPODel(TOr);
		end;
	RecordDelete(TOr);	
	StepBack(TOr);
	end;
	
  res = inner.POVcRecordRemoveAfter(POr, PO2r, stat, long4);
    POVcRecordRemoveAfter = res;
  RETURN;
END;

//===============================================
global
procedure tSummAllRecForRn(var record TempVc Listr)
BEGIN
record IStnrOrdVc ISOr;
Integer wn,nwn, RwCnt;
row IStnrOrdVc ISOrw;
row TempVc Listrw;
Boolean TrHr,TrHr1,bool;
record tOrdersVc TOr;

bool = false;
resetLoop(ISOr);
ISOr.POFlag = 0;
ISOr.ConfirmedFlag = 1;
TrHr = true;	
while (LoopKey("ConfPOFlag", ISOr , 2, TrHr))
	begin
	TrHr = ((ISOr.ConfirmedFlag == 1)  and (ISOr.POFlag == 0));
	if  (TrHr) then
		begin	
		for (RwCnt = 0; RwCnt < MatRowCnt(ISOr); RwCnt = RwCnt + 1)
			begin
			matRowGet(ISOr, RwCnt , ISOrw);
			if (ISOrw.Zak <= 0) then
				begin
				matRowGet(Listr, RwCnt , Listrw);
				Listrw.f2 = ISOrw.ArtCode;
				Listrw.f3 = StringToVal(Listrw.f3, M4Val) + ISOrw.Qnt;
				MatRowPut(Listr, RwCnt, Listrw);
				end;
			end;
		
		end;
	end;

 return;
end;	

global
function Boolean tExcLim(record IStnrOrdVc ISOr)
begin 

tExcLim = (tSumFISO(ISOr) >  ISOr.SummM);

  return;
end;



//=====================================================================================

global
updating
procedure tDelNrRowPO(LongInt SerNrPO, LongInt SerNrISO)
begin
record tOrdersVc TOr;
record IStnrOrdVc ISOr, ISO2r;
row IStnrOrdVc ISOrw;
boolean bool,bool1;
integer cnt, i, ii, RwCnt;
record POVc POr;
row POVc POrw;

bool1 = false;
ISOr.SerNr = SerNrISO;
if ReadFirstMain(ISOr, 1, true) then
	begin
	POr.SerNr = SerNrPO;
    if ReadFirstMain(POr, 1, true) then
		begin
		
		for (RwCnt = 0; RwCnt < MatRowCnt(ISOr); RwCnt = RwCnt + 1)
			begin
			bool = true;
			matRowGet(ISOr, RwCnt , ISOrw);
			for (ii = 0; ii < MatRowCnt(POr); ii = ii + 1)
				begin
				matRowGet(POr, ii , POrw);
				if POrw.ArtCode == ISOrw.ArtCode then
					begin
					bool = false;
					ii = MatRowCnt(POr);
					end;
				end;
			if (ISOrw.Zak == SerNrPO) and (bool) then //
				begin
				ISOrw.Zak = -1;
				matRowPut(ISOr, RwCnt , ISOrw);
				bool1 = true;
				end;		
			end;
		end;	
	if (bool1)	then
		begin
		ISOr.POFlag = 0;
		ISO2r.SerNr = ISOr.SerNr;
		ReadFirstMain(ISO2r, 1, true);
		recordUpdate(ISO2r, ISOr, false);	
		end;
	end;
return;	
end;

//=====================================================================================

global
updating
procedure DelNrRowPO(LongInt SerNr)
begin
record tOrdersVc TOr;

TOr.SerNrPO = SerNr;
while(LoopKey("SerNrPO", TOr, 1, true))
	begin
	tDelNrRowPO(TOr.SerNrPO,TOr.SerNrISO);
	end;
return;	
end;
//=====================================================================================

global
updating function LongInt POVcRecordUpdateAfter(var record POVc POr,record POVc PO2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record tOrdersVc TOr;
 
res = inner.POVcRecordUpdateAfter(POr,PO2r,stat,long4);

TOr.SerNrPO = POr.SerNr;
if ReadFirstKey("SerNrPO", TOr, 1, true) then
	begin
	DelNrRowPO(POr.SerNr);
	end; 
  POVcRecordUpdateAfter = res;
  RETURN;
END;


// //=============================================================================
// global
// updating
// function LongInt POVcRecordCheck(var record POVc POr,record POVc PO2r,LongInt stat,LongInt long4)
// BEGIN
// LongInt res;
// integer cnt, i, ii, RwCnt;
// boolean bool;
// record IStnrOrdVc ISOr, ISO2r;
// row IStnrOrdVc ISOrw;
// longInt SerNr;
// row POVc POrw;
// record tOrdersVc TOr;

// bool = false;
// res = inner.POVcRecordCheck(POr,PO2r,stat,long4);

// TOr.SerNrPO = POr.SerNr;
// if ReadFirstKey("SerNrPO", TOr, 1, true) then
	// begin
	// DelNrRowPO(POr.SerNr);
	// end;


// // запись изменений в строке
// POVcRecordCheck = res;
// RETURN;
// END;

function string 20 GetUserPosition(string UserCode)
begin
  record UserVc Usr;

  Usr.Code = UserCode;
  ReadFirstMain(Usr, 1, true);
  GetUserPosition = Usr.VPositionCode;
  Return;
end;


//====================================================

procedure tSumFind(var record PZPVc PZPr)
begin
row PZPVc PZPrw;
integer i;

PZPr.DocSum = 0;
for (i = 0; i < MatRowCnt(PZPr); i = i + 1)
	begin
	MatRowGet(PZPr, i, PZPrw);
	PZPr.DocSum = PZPr.DocSum + PZPrw.Sum;
	end;
Return;
end;
//====================================================

procedure tPayModeFind(var record PZPVc PZPr)
begin
row PMBlock PMrw;

if GetPMRow(PZPr.PayMode, PMrw) then
	begin
	GetAccCur(PMrw.AccNr, PZPr.Curncy);
	end
else
	begin
	PZPr.PayMode = blankval;
	PZPr.Curncy = blankval;
	end;
Return;		
end;
//====================================================
procedure tFN2Find(var record PZPVc PZPr)
begin 
row PZPVc PZPrw;
record ObjVc Objr;

MatRowGet(PZPr, 0, PZPrw);
Objr.Code = PZPrw.FN2;
if ReadFirstMain(Objr, 1, true) and (Objr.TerminateFlag == 0) and (Objr.OTCode == "FN2") then
	begin
	SetFieldValueByName(PZPr, "FN1", Objr.AutoObjects, 0); 
	end
else
	begin
	SetFieldValueByName(PZPr, "FN1", blankval, 0); 
	SetFieldValueByName(PZPr, "FN2", blankval, 0); 
	end;
Return;		
end;
//====================================================

procedure tAccFind(var record PZPVc PZPr)
begin 
row PZPVc PZPrw;
record AccVc Accr;
	
MatRowGet(PZPr, 0, PZPrw);
Accr.AccNumber = PZPrw.AccNumber;
if not (ReadFirstMain(Accr, 1, true) and (Accr.blockedFlag == 0)) then
	begin
	SetFieldValueByName(PZPr, "AccNumber", blankval, 0); 
	end;	
Return;		
end;	

procedure tAccAdd(record IStnrOrdVc ISOr, var record PZPVc PZPr)
begin 
row PZPVc PZPrw;
record tAccPZPVc APr;
record AccVc Accr;

resetloop(APr);
while loopmain(APr, 1, true)
	begin
	if SetInSet(ISOr.ObjUZTR,APr.SrtAcc) then
		begin
		SetFieldValueByName(PZPr, "AccNumber", APr.CodeAcc, 0); 		
		end;
	end;

tAccFind(PZPr);	
return;	
end;

//================================================================================================================= ПЗП
global
updating
function Boolean tCrTempTab(record TempVc Listr, var string ZakNrS)//, var record SDVc SDr
begin 
Boolean res;
Integer wn, nwn, RwCnt, nr;
record TempVc List1r;
row POVc POrw;
row  TempVc Listrw, List1rw;
record SDVc SD2r;//SDr, 
record IStnrOrdVc ISOr, ISO2r;
Boolean TrHr;
row IStnrOrdVc ISOrw;

SetLangMode(LangRussian, "RUS", 2);

res = false;
resetLoop(ISOr);
ISOr.POFlag = 1;
ISOr.ConfirmedFlag = 1;
TrHr = true;	
while (LoopKey("ConfPOFlag", ISOr , 2, TrHr))
	begin
	TrHr = ((ISOr.ConfirmedFlag == 1)  and (ISOr.POFlag == 1));
	if  (TrHr) and (ISOr.SDFlag == 0) then
		begin	
		for (RwCnt = 0; RwCnt < MatRowCnt(ISOr); RwCnt = RwCnt + 1)
			begin
			MatRowGet(ISOr, RwCnt, ISOrw);
			if nonblank(ZakNrS) then
				begin
				if not(SetInSet(ISOrw.Zak,ZakNrS)) then
					begin
					ZakNrS = ZakNrS & "," & ISOrw.Zak;
					end;
				end
			else
				begin
				ZakNrS = ISOrw.Zak;
				end;
			Listrw.f2 = ISOrw.ArtCode;
			MatrowPut(Listr, RwCnt, Listrw);
			end;
		res = true;	
		TrHr = false;
		end;
	end;

tCrTempTab = res;
		
  return;
end;

global
updating
procedure tSumms(var record TempVc Listr)
begin
Boolean res;
Integer wn, nwn, RwCnt, nr;
record TempVc List1r;
row POVc POrw;
row  TempVc Listrw, List1rw;
record SDVc SD2r;//SDr, 
record IStnrOrdVc ISOr, ISO2r;
Boolean TrHr;
row IStnrOrdVc ISOrw;

SetLangMode(LangRussian, "RUS", 2);

resetLoop(ISOr);
ISOr.POFlag = 1;
ISOr.ConfirmedFlag = 1;
TrHr = true;	
while (LoopKey("ConfPOFlag", ISOr , 2, TrHr))
	begin
	TrHr = ((ISOr.ConfirmedFlag == 1)  and (ISOr.POFlag == 1));
	if  (TrHr) and (ISOr.SDFlag == 0) then
		begin	
		for (RwCnt = 0; RwCnt < MatRowCnt(ISOr); RwCnt = RwCnt + 1)
			begin
			MatRowGet(ISOr, RwCnt, ISOrw);
			MatRowGet(Listr, RwCnt, Listrw);
			Listrw.f3 = StringToVal(Listrw.f3,M4Str) + ISOrw.Qnt;
			MatrowPut(Listr, RwCnt, Listrw);
			end;
		end;
	end;

  return;
end;


global
function Boolean tAddRowPZP(LongInt Zak, var record PZPVc PZPr)
begin
row PZPVc PZPrw;
val SUMM;
record IStnrOrdVc ISOr;
boolean TrHr, res, bool;
Integer RwCnt;
row IStnrOrdVc ISOrw;

SUMM = 0;;
resetLoop(ISOr);
ISOr.SDFlag = 0;
TrHr = true;	
while (LoopKey("SDFlag", ISOr , 1, TrHr))
	begin
	TrHr = (ISOr.SDFlag == 0) ;
	if  (TrHr) and (ISOr.POFlag == 1) and (ISOr.ConfirmedFlag == 1) then
		begin
		for (RwCnt = 0; RwCnt < MatRowCnt(ISOr); RwCnt = RwCnt + 1)
			begin
			matRowGet(ISOr, RwCnt, ISOrw);
			if (ISOrw.Zak == Zak) and  (ISOrw.Qnt > 0) then
				begin
				SUMM = SUMM + ISOrw.Qnt * ISOrw.Price;
				end;
			end;
		bool = true;		
		end;
	end;	
if bool then
	begin
	PZPrw.Sum = SUMM;
	PZPrw.Destination = "Оплата поставщику ";
	PZPrw.Objects = Zak;
	PZPrw.FN2 = "";
	matrowInsert(PZPr, 0, PZPrw);
	// tAccAdd(ISOr, PZPr);	
	// tFN2Find(PZPr);
	end;
res = true;
tAddRowPZP = res;
return;
end;
	  
//====================================================
global
updating
function Boolean MakePZPFromISO(var record PZPVc PZPr)
begin 
Boolean res, TrHr;
Integer wn, nwn, RwCnt, nr, pos;
record IStnrOrdVc ISOr;
record UserVc Usr;
row PZPVc PZPrw;
record TempVc Listr;
string 200 ZakNrS;
String 20 Zak;
LongInt ZakNr;


RecordNew(PZPr);
//PZPr.SerNr = NextSerNr("PZPr", CurrentDate, -1, false, "");
// Usr.Code = CurrentUser;
// ReadFirstMain(Usr, 1, true);
// PZPr.SerNr = -1;
// PZPr.Initiator = CurrentUser;
// PZPr.Supervisor = Usr.Superior;
// PZPr.RegDate = CurrentDate;
// PZPr.Position = GetUserPosition(PZPr.Initiator);
// PZPr.Invalid = 0;
//PutZRSText(PZPr);
PZPr.ExpType = 2;
PZPr.PayMode = "AB";
tPayModeFind(PZPr);

if tCrTempTab(Listr, ZakNrS) then
	begin
	tSumms(Listr);
	pos = 0;
	ExtractObj(ZakNrS, pos, Zak);
	while nonblank(Zak) 
		begin
		ZakNr = StringToLongInt(Zak);
		res = tAddRowPZP(ZakNr, PZPr);	
		ExtractObj(ZakNrS, pos, Zak);	
		end;	
	end;
	
tSumFind(PZPr);	
MakePZPFromISO = res;
return;
end;
//============================================================================================================================

global
function Boolean MakeMov(var record StockMovVc SMr, record TempVc Listr, string Comment) 
BEGIN
Integer curcomp, RwCnt, ii, i;
Boolean res;
row StockMovVc SMrw;
record INVc INr;
record IStnrOrdVc ISOr;
row IStnrOrdVc ISOrw;
row TempVc Listrw;

SetLangMode(LangRussian, "RUS", 2);

 
RecordNew(SMr);
SMr.OrdTransDate = CurrentDate;
SMr.FrLocation = "A001";
SMr.ThrouLocation = "G002";
SMr.ToLocation = ""; //Склад филиала заполняется вручную
SMr.PlanSendDate = CurrentDate;
SMr.PlanSendTime = "13:00:00";
SMr.PlanArrDate = AddDay(CurrentDate, 1);//ISOr.DateSup
SMr.PlanArrTime = "18:00:00";
SMr.Comment = "на подразделение " & Comment;
for(i = 0 ; i < MatRowCnt(Listr); i = i + 1)
	begin
	MatRowGet(Listr, i, Listrw);
	if (StringToVal(Listrw.f3,M4Val) > 0) then
		begin
		SMrw.ArtCode = Listrw.f2;
		INr.Code = SMrw.ArtCode;
		ReadFirstMain(INr,0,true);
		SMrw.Coefficient = INr.UnitCoefficient;
		SMrw.ArtCode = INr.Code;
		SMrw.Spec = INr.Name;
		SMrw.BasePrice = INr.UPrice1;
		SMrw.Objects = FindINObjects(INr.Objects,INr.Group);
		SMrw.UnitXval = INr.Width;
		SMrw.UnitYval = INr.Height;
		SMrw.UnitZval = INr.Depth;
		SMrw.OrdQuant = StringToVal(Listrw.f3,M4Val);
		MatRowInsert(SMr, MatRowCnt(SMr), SMrw);
		StockMovVc_PasteArtCode(SMr, 0, 1, true);
		end;
	end;
	
if MatRowCnt(SMr) > 0 then
	begin
	Res = true;
	end
else
	begin
	Res = false;
	end;
 
MakeMov = res;
RETURN;
END;



global
function Boolean MakeMovFromISO(var record StockMovVc SMr, string OBjrCode, string Comment) 
BEGIN
Integer curcomp, RwCnt, ii, i;
Boolean res, TrHr, bool;
row StockMovVc SMrw;
record INVc INr;
record IStnrOrdVc ISOr;
row IStnrOrdVc ISOrw;
row TempVc Listrw;
record TempVc Listr;

SetLangMode(LangRussian, "RUS", 2);

res = 0;
resetloop(ISOr);
ISOr.ObjPODR = OBjrCode;
TrHr = true;
while (LoopKey("ObjPODR", ISOr, 1, TrHr))
	begin
	TrHr = (ISOr.ObjPODR == OBjrCode) ;
	if  (TrHr and (ISOr.SDFlag == 0) and (ISOr.ConfirmedFlag == 1) and (ISOr.POFlag == 1)) then
		begin	
		for (RwCnt = 0; RwCnt < MatRowCnt(ISOr); RwCnt = RwCnt + 1)
			begin
			MatRowGet(ISOr, RwCnt, ISOrw);
			MatRowGet(Listr, RwCnt, Listrw);
			Listrw.f2 = ISOrw.ArtCode;
			Listrw.f3 = StringToVal(Listrw.f3,M4Val) + ISOrw.Qnt;
			MatrowPut(Listr, RwCnt, Listrw);
			end;
		bool = true;	
		end;
	end;
if bool then
	begin
	res = MakeMov(SMr, Listr, Comment);
	end;
MakeMovFromISO = res;
RETURN;
END;

//============================================
global
procedure tKolISO(LongInt SerNr, var val KolF, var val KolP)
begin
val sumF, sumP;
row IStnrOrdVc ISOrw;
record IStnrOrdVc ISOr;
integer RwCnt;

sumF = 0;
sumP = 0;
ISOr.SerNr = SerNr;
ReadfirstMain(ISOr, 1, true);
for (RwCnt = 0; RwCnt < MatRowCnt(ISOr); RwCnt = RwCnt + 1)
	begin
	MatRowGet(ISOr, RwCnt, ISOrw)
	sumF = sumF + ISOrw.Qnt;
	sumP = sumP + ISOrw.Plan;
	end;
KolF = sumF;
KolP = sumP;
RETURN;
end;

global
function boolean FindPrInPlan(string code)
begin
record IStnrPlanVc SPr, SP2r;
row IStnrPlanVc SPrw;
boolean res;
LongInt Year;
integer i, qu, RwCnt;

res = false;
if GetMonth(CurrentDate) == 12 then
	begin
	SPr.Year = GetYear(CurrentDate) + 1;
	end
else
	begin
	SPr.Year = GetYear(CurrentDate);
	end;
if ReadFirstKey("Year", SPr ,1, true) then
	begin
	res = true;
	for (RwCnt = 0; RwCnt < MatRowCnt(SPr); RwCnt = RwCnt + 1)
		begin
		MatRowGet(SPr, RwCnt, SPrw);
		if SPrw.ArtCode == code then
			begin
			res = false;
			RwCnt = MatRowCnt(SPr);
			end;
		end;
	end;	
FindPrInPlan = res;	

RETURN;
end;

global
updating
function boolean AddINtoPlan(record tINKVc INKr)
begin
record IStnrPlanVc SPr, SP2r;
row IStnrPlanVc SPrw;
boolean cont, TrHr, res;
LongInt Year;
integer i, qu, RwCnt;

res = false;
cont = (INKr.Terminated == 0);
// функция проверки на уже наличие такого товара.
if FindPrInPlan(INKr.Code) and cont then
	begin
	TrHr = true;
	if GetMonth(CurrentDate) == 12 then
		begin
		Year = GetYear(CurrentDate) + 1;
		end
	else
		begin
		Year = GetYear(CurrentDate);
		end;
	SPr.Year = Year;
	while (LoopKey("Year", SPr ,1, TrHr))
		begin
		TrHr = (SPr.Year == Year);
		if TrHr then
			begin
			SPrw.ArtCode = INKr.Code;
			SPrw.ArtName = INKr.Name;
			SPrw.Price1 = INKr.Price;
			SPrw.POCode1 = INKr.VECode;
			SPrw.POName1 = INKr.VEName;
			RwCnt = MatRowCnt(SPr);
			MatRowInsert(SPr, RwCnt, SPrw);
			if GetMonth(CurrentDate) == 12 then
				begin
				qu = 1;
				end
			else
				begin
				qu = GetMonth(CurrentDate) + 1;
				end;
			SetFieldValueByName(SPr, "Price" & qu, INKr.Price, RwCnt); 	
			SetFieldValueByName(SPr, "POCode" & qu, INKr.VECode, RwCnt); 	
			SetFieldValueByName(SPr, "POName" & qu, INKr.VEName, RwCnt); 	
			// for (i = 1; i <= 12; i = i + 1)
				// begin	
				// fieldname = "Plan" & i;	
				// SetFieldValueByName(SPr, "SummF" & i, tSumF(SPr, fieldname), -1); 	
				// end;
			SP2r.SerNr = SPr.SerNr;
			ReadFirstMain(SP2r, 1, True);
			RecordUpdate(SP2r, SPr, false);
			end;
		end;
	res = true;	
	end;
	
AddINtoPlan = res;
return;
end;


//========================================================================

global
updating
function Boolean tCurRePrice()
begin
record IStnrPlanVc SPr, SP2r;
row IStnrPlanVc SPrw;
record tINKVc INr;
val Sum;
Integer RwCnt,i,qu;
string 20 fieldname;

resetLoop(SPr);
while (LoopMain(SPr, 1, true))
	begin
	for (RwCnt = 0; RwCnt < MatRowCnt(SPr); RwCnt = RwCnt + 1)
		begin	  
		matRowGet(SPr, RwCnt, SPrw);
		INr.Code = SPrw.ArtCode;
		ReadFirstMain(INr, 1, true);
		qu = GetMonth(CurrentDate);
		SetFieldValueByName(SPr, "Price" & qu, INr.Price, RwCnt); 	
		SetFieldValueByName(SPr, "POCode" & qu, INr.VECode, RwCnt); 	
		SetFieldValueByName(SPr, "POName" & qu, INr.VEName, RwCnt); 	
		//SPrw.Price2 = INr.Price;
		//matrowput(SPr, RwCnt, SPrw);
		end;  
	for (i = 1; i <= 12; i = i + 1)
		begin	
		fieldname = "Plan" & i;	
		SetFieldValueByName(SPr, "SummF" & i, tSumF(SPr, fieldname), -1); 	
		end;
	SP2r.SerNr = SPr.SerNr;
	ReadFirstMain(SP2r, 1, true);
	recordUpdate(SP2r, SPr, false);
	end;
	
	tCurRePrice = true;
  return;
end;
//====================================================================

global
updating
function Boolean tCurRePriceISO()
begin
record IStnrOrdVc ISOr, ISO2r;
row IStnrOrdVc ISOrw;
//record INVc INr;
record tINKVc INr;
val Sum;
Integer RwCnt,i;
string 20 fieldname;
boolean TrHr;


resetLoop(ISOr);
ISOr.POFlag = 0;
TrHr = true;	
while (LoopKey("POFlag", ISOr , 1, TrHr))
	begin
	Sum = 0;
	TrHr = (ISOr.POFlag == 0);
	if  (TrHr) then
		begin	
		for (RwCnt = 0; RwCnt < MatRowCnt(ISOr); RwCnt = RwCnt + 1)
			begin
			matRowGet(ISOr, RwCnt , ISOrw);
			INr.Code = ISOrw.ArtCode;
			ReadFirstMain(INr, 1, true);
			ISOrw.Price = INr.Price;
			matrowput(ISOr, RwCnt, ISOrw);
			Sum = Sum + ISOrw.Qnt * ISOrw.Price;
			end;
		ISOr.SummFM = Sum;
		ISO2r.SerNr = ISOr.SerNr;
		ReadFirstMain(ISO2r, 1, true);
		recordUpdate(ISO2r, ISOr, true);
		end;
	
	end;
	tCurRePriceISO = true;
  return;
end;
//====================================================================

global
updating
function Boolean tReSumm()
begin
record IStnrOrdVc ISOr, ISO2r;
row IStnrOrdVc ISOrw;
record tINKVc INr;
val Sum;
Integer RwCnt,i;
string 20 fieldname;
boolean TrHr;
record IStnrPlanVc SPr, SP2r;
row IStnrPlanVc SPrw;

resetLoop(ISOr);
ISOr.POFlag = 0;
TrHr = true;	
while (LoopKey("POFlag", ISOr , 1, TrHr))
	begin
	Sum = 0;
	TrHr = (ISOr.POFlag == 0);
	if  (TrHr) then
		begin	
		ResetLoop(SPr);
		SPr.Year = GetYear(ISOr.OrdPlanDate);
		SPr.DepCode = ISOr.DepCode ;
		SPr.ObjPODR = ISOr.ObjPODR;
		SPr.ObjUZTR = ISOr.ObjUZTR;
		SPr.ObjTIP = ISOr.ObjTIP;
		if ReadFirstKey("MegaKey", SPr, 5, true) then
			begin
			if ISOr.ObjPODR == SPr.ObjPODR and	ISOr.ObjUZTR == SPr.ObjUZTR and	ISOr.ObjTIP == SPr.ObjTIP then //and ISOr.ObjFN == SPr.ObjFN
				begin
				ISOr.SummM = StringToVal(GetFieldValueByName(SPr, "Summ" & GetMonth(ISOr.OrdPlanDate), -1), M4Val); //ISOr.ObjStr;
				//ISOr.SummFM = StringToVal(GetFieldValueByName(SPr, "SummF" & GetMonth(ISOr.OrdPlanDate), -1), M4Val);//ISOr.ObjStr;
				ISO2r.SerNr = ISOr.SerNr;
				ReadFirstMain(ISO2r, 1, true);
				recordUpdate(ISO2r, ISOr, true);	
				end;
			end;
		end;	
	end;
	tReSumm = true;
  return;
end;

global
procedure tSummaryISO(record RcVc RepSpec, var record TempVc Listr)
begin
record IStnrOrdVc ISOr;
Integer wn,nwn, RwCnt;
row IStnrOrdVc ISOrw;
row TempVc Listrw;
Boolean TrHr,TrHr1,bool;
record tOrdersVc TOr;

bool = false;
resetLoop(ISOr);
ISOr.OrdDate = RepSpec.sStartDate;
TrHr = true;	
while (LoopKey("OrdDate", ISOr , 1, TrHr))
	begin
	TrHr = (ISOr.OrdDate <= RepSpec.sEndDate) ;
	if TrHr then
		begin	
		for (RwCnt = 0; RwCnt < MatRowCnt(ISOr); RwCnt = RwCnt + 1)
			begin
			matRowGet(ISOr, RwCnt , ISOrw);
			matRowGet(Listr, RwCnt , Listrw);
			Listrw.f2 = ISOrw.ArtCode;
			Listrw.f3 = ISOrw.Price;
			Listrw.f4 = StringToVal(Listrw.f4, M4Val) + ISOrw.Qnt;
			Listrw.f5 = StringToVal(Listrw.f5, M4Val) + ISOrw.Plan;
			MatRowPut(Listr, RwCnt, Listrw);
			end;
		
		end;
	end;

end;

// global
// function string 20 tGetUserLoc(string Code)
// begin
// record UserVc USr;
// Record LocationVc Locr;
// boolean TrHs;

// USr.Code = Code;
// ReadFirstMain(USr, 1, true);
// TrHs = true;
// while (LoopMain(LocationVr,1,TrHs))
	// begin
	// if
	// end;


// return;
// end;

//==================================================
global
updating
function Boolean tMakeSD(longInt ISOrSerNr, var record SDVc SDr, date d1, date d2)//, var record SDVc SDr
begin
Boolean res, TrHr;
Integer wn, nwn, RwCnt, nr, f;
record TempVc  List1r;
row POVc POrw;
record SDVc SD2r;//
row SDVc SDrw;
record IStnrOrdVc ISOr, ISO2r;
row IStnrOrdVc ISOrw;
val S;
record INVc INr;

SetLangMode(LangRussian, "RUS", 2);

ISOr.SerNr = ISOrSerNr;
if ReadFirstMain(ISOr, 1, true) then
	begin
	if  ((ISOr.ConfirmedFlag == 1)  and (ISOr.POFlag == 1)) and (ISOr.SDFlag == 0)
		and  ((ISOr.OrdDate >= d1) and  (ISOr.OrdDate <= d2)) then
		begin
		RecordNew(SDr);
		SDr.TransDate = CurrentDate;
		SDr.SerNr = NextSerNr("SDVc",SDr.TransDate,-1,false,"");
		SDr.Location = "";
		SDr.Objects = ISOr.ObjPODR & "," & ISOr.ObjUZTR & "," & ISOr.ObjTIP & "," & ISOr.ObjFN;
		SDr.Comment = "Канцтовары" & " - " & ISOr.DepName  & " - " & ISOr.SummFM;
		RecordStore(SDr,False);
		for (RwCnt = 0; RwCnt < MatRowCnt(ISOr); RwCnt = RwCnt + 1)
			begin
			matRowGet(ISOr, RwCnt, ISOrw);
			if   (ISOrw.Qnt > 0) then //(ISOrw.Zak == Zak) and
				begin
				INr.Code = ISOrw.ArtCode;
				readfirstmain(INr, 1, true);
				SDrw.ArtCode = INr.Code;
				SDrw.Recepy = "";
				SDrw.Coefficient = INr.UnitCoefficient;
				SDrw.Spec = INr.Name;
				SDrw.BasePrice = INr.UPrice1;
				SDrw.Objects = "KA";//FindINObjects(INr.Objects,INr.Group);
				SDrw.Qty = ISOrw.Qnt;
				f = MatRowCnt(SDr);
				MatRowInsert(SDr, f, SDrw);
				SDVc_PasteQty(SDr, f);
				end;
			end;
		if (MatRowCnt(SDr) == 0) then
			begin
			RecordDelete(SDr);
			end
		else
			begin
			ISOr.SDNr = SDr.SerNr;
			ISOr.SDFlag = 1;
			ISO2r.SerNr =  ISOr.SerNr;
			ReadFirstMain(ISO2r, 1, true);
			RecordUpdate(ISO2r, ISOr, false);
			SD2r.SerNr = SDr.SerNr;
			ReadFirstMain(SD2r, 1, true);
			RecordUpdate(SD2r, SDr, false);
			end;
		res = true;
		end;
	end;


tMakeSD = res;

  return;
end;


global
updating
function Boolean CrTempTab(longInt ISOrSerNr, var string ZakNrS)//, var record SDVc SDr
begin
Boolean res;
Integer wn, nwn, RwCnt, nr;
row POVc POrw;
record SDVc SD2r;//SDr,
record IStnrOrdVc ISOr, ISO2r;
Boolean TrHr;
row IStnrOrdVc ISOrw;

SetLangMode(LangRussian, "RUS", 2);

ISOr.SerNr = ISOrSerNr;
if ReadFirstMain(ISOr, 1, true) then
	begin
	if  ((ISOr.ConfirmedFlag == 1)  and (ISOr.POFlag == 1)) and (ISOr.SDFlag == 0) then
		begin
		for (RwCnt = 0; RwCnt < MatRowCnt(ISOr); RwCnt = RwCnt + 1)
			begin
			MatRowGet(ISOr, RwCnt, ISOrw);
			if nonblank(ZakNrS) then
				begin
				if not(SetInSet(ISOrw.Zak,ZakNrS)) then
					begin
					ZakNrS = ZakNrS & "," & ISOrw.Zak;
					end;
				end
			else
				begin
				ZakNrS = ISOrw.Zak;
				end;
			end;
		res = true;
		TrHr = false;
		end;
	end;

CrTempTab = res;

  return;
end;

//==================================================
global
updating
function Boolean MakeSDFromISO(longInt ISOrSerNr, var record SDVc SDr, date d1, date d2)//, var record SDVc SDrlongInt Zak
begin
Boolean res,TrHr, bool, booll;
Integer wn, nwn, RwCnt, nr, pos;
record TempVc Listr, List1r;
row POVc POrw;
row  TempVc Listrw, List1rw;
record SDVc SD2r;//SDr,
string 250 ZakNrS;
String 20 Zak;
LongInt ZakNr;
record PUVc PUr;


SetLangMode(LangRussian, "RUS", 2);

booll = false;
if CrTempTab(ISOrSerNr, ZakNrS) then
	begin
	pos = 0;
	ExtractObj(ZakNrS, pos, Zak);
	while nonblank(Zak)
		begin

		ZakNr = StringToLongInt(Zak);
		PUr.PONr = ZakNr;
		TrHr = true;
		while (LoopKey("PONr", PUr, 1, TrHr))
			begin
			TrHr = 	(PUr.PONr == ZakNr);
			if (TrHr) and (Pur.Invalid <> 1) then
				begin
				bool = false;
				if (Pur.OKFlag == 1) then
					begin
					TrHr = false;
					bool = true;
					end;
				end;
			end;
		ExtractObj(ZakNrS, pos, Zak);
		booll = bool;
		end;
	end;

if booll then
	begin
	res = tMakeSD(ISOrSerNr, SDr, d1, d2);
	end;

MakeSDFromISO = res;

  return;
end;


//==================================================
global
updating
function Boolean MakeSDFromISO2(longInt ISOrSerNr, date d1, date d2)//, var record SDVc SDrlongInt Zak, var record SDVc SDr
begin
Boolean res,TrHr, bool, booll;
Integer wn, nwn, RwCnt, nr, pos;
record TempVc Listr, List1r;
row POVc POrw;
row  TempVc Listrw, List1rw;
record SDVc SDr,SD2r;//
string 250 ZakNrS;
String 20 Zak;
LongInt ZakNr;
record PUVc PUr;

SetLangMode(LangRussian, "RUS", 2);


booll = false;
if CrTempTab(ISOrSerNr, ZakNrS) then
	begin
	pos = 0;
	ExtractObj(ZakNrS, pos, Zak);
	while nonblank(Zak)
		begin

		ZakNr = StringToLongInt(Zak);
		PUr.PONr = ZakNr;
		TrHr = true;
		while (LoopKey("PONr", PUr, 1, TrHr))
			begin
			TrHr = 	(PUr.PONr == ZakNr);
			if (TrHr) and (Pur.Invalid <> 1) then
				begin
				bool = false;
				if (Pur.OKFlag == 1) then
					begin
					TrHr = false;
					bool = true;
					end;
				end;
			end;
		ExtractObj(ZakNrS, pos, Zak);
		booll = bool;
		end;
	end;

if booll then
	begin
	res = tMakeSD(ISOrSerNr, SDr, d1, d2);
	end;

MakeSDFromISO2 = res;

  return;
end;

// // ==================================================
// global
// updating
// function Boolean MakeSDFromISOLClass()//, var record SDVc SDrlongInt Zak
// begin
// Boolean res;
// Integer wn, nwn, RwCnt, nr;
// record TempVc Listr, List1r;
// row POVc POrw;
// row  TempVc Listrw, List1rw;
// record SDVc SDr,SD2r;//
// record IStnrOrdVc ISOr, ISO2r;
// Boolean TrHr;

// resetLoop(ISOr);
// ISOr.POFlag = 1;
// ISOr.ConfirmedFlag = 1;
// TrHr = true;
// while (LoopKey("ConfPOFlag", ISOr , 2, TrHr))
	// begin
	// TrHr = ((ISOr.ConfirmedFlag == 1)  and (ISOr.POFlag == 1));
	// if  (TrHr) and (ISOr.SDFlag == 0) then
		// begin
		// MakeSDFromISO2(ISOr.SerNr, d1, d2);
		// end;
	// end;
// res = true;
// MakeSDFromISOLClass = res;

  // return;
// end;

global
updating procedure tDisISO(longInt SerNr)
BEGIN
record IStnrOrdVc ISOr, ISO2r;
Boolean TrHr;

resetLoop(ISOr);
ISOr.SDNr = SerNr;
TrHr = true;
ReadfirstKey("SDNr", ISOr , 1, TrHr);
ISOr.SDNr = -1;
ISOr.SDFlag = 0;
ISO2r.SerNr =  ISOr.SerNr;
ReadFirstMain(ISO2r, 1, true);
RecordUpdate(ISO2r, ISOr, false);

RETURN;
END;
//====================================================================
global
updating function LongInt SDVcRecordRemoveTest(var record SDVc SDr,record SDVc SD2r,LongInt stat,LongInt long4)
BEGIN
LongInt res;

res = inner.SDVcRecordRemoveTest(SDr, SD2r, stat, long4);
tDisISO(SDr.SerNr);


SDVcRecordRemoveTest = res;
RETURN;
END;


// //===================================================================================================================================================
// // Заказы поставщикам

