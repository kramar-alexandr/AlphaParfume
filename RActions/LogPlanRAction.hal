external inner function val GetStockQty(string,string,Date,Boolean);
external inner function roundmode SetRoundModeD(Integer);

global
function Longint LogPlanDVcRecordDefaults(var record LogPlanDVc LPDr, record LogPlanDVc LPD2r, LongInt stat, LongInt long4)
begin
Longint Res;
record UserVc USr;
boolean TrHs;

SetLangMode(LangRussian,"RUS",2);
if (SingleUserMode) then 
	begin
	LPDr.SerNr = NextSerNr("LogPlanDVc", CurrentDate, -1, false, "");
	end
else
	begin
	LPDr.SerNr = -1;
	end;

LogPlanDVcRecordDefaults = res;
RETURN;
end;

global
function LongInt LogPlanDVcRecordDuplicate(var record LogPlanDVc LPDr, record LogPlanDVc LPD2r, LongInt stat, LongInt long4)
BEGIN
LongInt res;
record UserVc USr;
integer i;
SetLangMode(LangRussian,"RUS",2);
if (SingleUserMode) then 
  begin
  LPDr.SerNr = NextSerNr("LogPlanDVc", CurrentDate, -1, false, "");
  end 
else
  begin
  LPDr.SerNr = -1;
  end;

LogPlanDVcRecordDuplicate = res; 
RETURN;
END;

global
updating function LongInt LogPlanDVcRecordRemoveTest(var record LogPlanDVc LPDr, record LogPlanDVc LPD2r, LongInt stat, LongInt long4)
BEGIN
record UserVc USr;

LogPlanDVcRecordRemoveTest = 1;
USr.Code = CurrentUser;
ReadFirstMain(USr, 1, True);
if (not UserCanAction("UnOKAll",True)) then 
  begin
  LogPlanDVcRecordRemoveTest = 0;
  end;
RETURN;
END;

global
function LongInt LogPlanDVcRecordCheck(var record LogPlanDVc LPDr, record LogPlanDVc LPD2r, LongInt stat, LongInt long4)
BEGIN
LongInt res;
integer insertmode, updatemode;
record UserVc USr;

SetLangMode(LangRussian, "RUS", 2);
res = 0;     
insertmode = 1;
updatemode = 2;

USr.Code = CurrentUser;
ReadFirstMain(Usr, 1, True);

if (stat <> updatemode) and (LPDr.SerNr < 1) then
  begin
  LPDr.SerNr = NextSerNr("LogPlanDVc", CurrentDate, -1, false, "");
  end;
if (stat == updatemode) and (LPDr.SerNr < 1) then
  begin
  res = -1;
  end;
  LogPlanDVcRecordCheck = res;
RETURN;
end;

//========================================================================================
global
function Longint LogPlWVcRecordDefaults(var record LogPlWVc LPDr, record LogPlWVc LPD2r, LongInt stat, LongInt long4)
begin
Longint Res;
record UserVc USr;
boolean TrHs;

SetLangMode(LangRussian,"RUS",2);
if (SingleUserMode) then 
  begin
  LPDr.SerNr = NextSerNr("LogPlWVc", CurrentDate, -1, false, "");
  end
else
  begin
  LPDr.SerNr = -1;
  end;  
  

LogPlWVcRecordDefaults = res;
RETURN;
end;

global
function LongInt LogPlWVcRecordDuplicate(var record LogPlWVc LPDr, record LogPlWVc LPD2r, LongInt stat, LongInt long4)
BEGIN
LongInt res;
record UserVc USr;
integer i;
SetLangMode(LangRussian,"RUS",2);
if (SingleUserMode) then 
  begin
  LPDr.SerNr = NextSerNr("LogPlWVc", CurrentDate, -1, false, "");
  end 
else
  begin
  LPDr.SerNr = -1;
  end;

LogPlWVcRecordDuplicate = res; 
RETURN;
END;

global
updating function LongInt LogPlWVcRecordRemoveTest(var record LogPlWVc LPDr, record LogPlWVc LPD2r, LongInt stat, LongInt long4)
BEGIN
record UserVc USr;

LogPlWVcRecordRemoveTest = 1;
USr.Code = CurrentUser;
ReadFirstMain(USr, 1, True);
if (not UserCanAction("UnOKAll",True)) then 
  begin
  LogPlWVcRecordRemoveTest = 0;
  end;
RETURN;
END;

global
function LongInt LogPlWVcRecordCheck(var record LogPlWVc LPDr, record LogPlWVc LPD2r, LongInt stat, LongInt long4)
BEGIN
LongInt res;
integer insertmode, updatemode;
record UserVc USr;

SetLangMode(LangRussian, "RUS", 2);
res = 0;     
insertmode = 1;
updatemode = 2;

USr.Code = CurrentUser;
ReadFirstMain(Usr, 1, True);

if (stat <> updatemode) and (LPDr.SerNr < 1) then
  begin
  LPDr.SerNr = NextSerNr("LogPlWVc", CurrentDate, -1, false, "");
  end;
if (stat == updatemode) and (LPDr.SerNr < 1) then
  begin
  res = -1;
  end;
  LogPlWVcRecordCheck = res;
RETURN;
end;


global updating 
function LongInt LogPlWVcRecordSave(var record LogPlWVc LPDr, record LogPlWVc LPD2r, LongInt stat, LongInt long4)
BEGIN
record HALNameVc HNr;
LongInt res;

LogPlWVcRecordSave = res;  
RETURN;
end;

//======================================================================================================================

global
function Longint PercentVcRecordDefaults(var record PercentVc Pr, record PercentVc P2r, LongInt stat, LongInt long4)
begin
Longint Res;
record UserVc USr;
boolean TrHs;

SetLangMode(LangRussian,"RUS",2);
if (SingleUserMode) then 
  begin
  Pr.SerNr = NextSerNr("PercentVc", CurrentDate, -1, false, "");
  end;

PercentVcRecordDefaults = res;
RETURN;
end;

global
function LongInt PercentVcRecordDuplicate(var record PercentVc Pr, record PercentVc P2r, LongInt stat, LongInt long4)
BEGIN
LongInt res;
record UserVc USr;
integer i;
SetLangMode(LangRussian,"RUS",2);
if (SingleUserMode) then 
  begin
  Pr.SerNr = NextSerNr("PercentVc", CurrentDate, -1, false, "");
  end 
else
  begin
  Pr.SerNr = -1;
  end;

Pr.Empl = "";
Pr.Cust = "";
 
PercentVcRecordDuplicate = res; 
RETURN;
END;

global
function LongInt PercentVcRecordCheck(var record PercentVc Pr, record PercentVc P2r, LongInt stat, LongInt long4)
BEGIN
LongInt res;
integer insertmode, updatemode;
record UserVc USr;

SetLangMode(LangRussian, "RUS", 2);
res = 0;     
insertmode = 1;
updatemode = 2;

USr.Code = CurrentUser;
ReadFirstMain(Usr, 1, True);

if (stat <> updatemode) and (Pr.SerNr < 1) then
  begin
  Pr.SerNr = NextSerNr("PercentVc", CurrentDate, -1, false, "");
  end;
if (stat == updatemode) and (Pr.SerNr < 1) then
  begin
  res = -1;
  end;
  
if BlankDate(Pr.FDate) or Blank(Pr.SalesGroup) 
	or (Blank(Pr.Empl) and Blank(Pr.Cust)) or (nonBlank(Pr.Empl) and nonBlank(Pr.Cust)) or Blank(Pr.Percent)  then
  begin
  res = -1;
  end; 
  
  PercentVcRecordCheck = res;
RETURN;
end;

//=================================================================================================

global
function Longint NewArtVcRecordDefaults(var record NewArtVc NAr, record NewArtVc NA2r, LongInt stat, LongInt long4)
begin
Longint Res;
record UserVc USr;
boolean TrHs;

SetLangMode(LangRussian,"RUS",2);
if (SingleUserMode) then 
	begin
	NAr.SerNr = NextSerNr("NewArtVc", CurrentDate, -1, false, "");
	end
else
	begin
	NAr.SerNr = -1;
	end;

NewArtVcRecordDefaults = res;
RETURN;
end;

global
function LongInt NewArtVcRecordDuplicate(var record NewArtVc NAr, record NewArtVc NA2r, LongInt stat, LongInt long4)
BEGIN
LongInt res;
record UserVc USr;
integer i;
SetLangMode(LangRussian,"RUS",2);
if (SingleUserMode) then 
  begin
  NAr.SerNr = NextSerNr("NewArtVc", CurrentDate, -1, false, "");
  end 
else
  begin
  NAr.SerNr = -1;
  end;

NewArtVcRecordDuplicate = res; 
RETURN;
END;

global
updating function LongInt NewArtVcRecordRemoveTest(var record NewArtVc NAr, record NewArtVc NA2r, LongInt stat, LongInt long4)
BEGIN
record UserVc USr;

NewArtVcRecordRemoveTest = 1;
USr.Code = CurrentUser;
ReadFirstMain(USr, 1, True);
if (not UserCanAction("UnOKAll",True)) then 
  begin
  NewArtVcRecordRemoveTest = 0;
  end;
RETURN;
END;

global
function LongInt NewArtVcRecordCheck(var record NewArtVc NAr, record NewArtVc NA2r, LongInt stat, LongInt long4)
BEGIN
LongInt res;
integer insertmode, updatemode;
record UserVc USr;

SetLangMode(LangRussian, "RUS", 2);
res = 0;     
insertmode = 1;
updatemode = 2;

USr.Code = CurrentUser;
ReadFirstMain(Usr, 1, True);

if (stat <> updatemode) and (NAr.SerNr < 1) then
	begin
	NAr.SerNr = NextSerNr("NewArtVc", CurrentDate, -1, false, "");
	end;
if (stat == updatemode) and (NAr.SerNr < 1) then
	begin
	res = -1;
	end;
if blank(NAr.ArtCode) then
	begin
	RecordCheckError(20549,"",-1,"ArtCode");	
	res = -1;
	end;  
if blank(NAr.LocCode) then
	begin
	RecordCheckError(20549,"",-1,"LocCode");	
	res = -1;
	end; 
if NAr.Qty == 0 then
	begin
	RecordCheckError(20549,"",-1,"Qty");	
	res = -1;
	end; 	
  
  NewArtVcRecordCheck = res;
RETURN;
end;

//======================================================================================================== ПЛАНИРОВАНИЕ ПЕРЕМЕЩЕНИЙ
global
function Longint tMovPlanVcRecordDefaults(var record tMovPlanVc MPr, record tMovPlanVc MP2r, LongInt stat, LongInt long4)
begin
Longint Res;
record UserVc USr;
boolean TrHs;

SetLangMode(LangRussian,"RUS",2);
if (SingleUserMode) then 
	begin
	MPr.SerNr = NextSerNr("tMovPlanVc", CurrentDate, -1, false, "");
	end
else
	begin
	MPr.SerNr = -1;
	end;
 
tMovPlanVcRecordDefaults = res;
RETURN;
end;

global
function LongInt tMovPlanVcRecordDuplicate(var record tMovPlanVc MPr, record tMovPlanVc MP2r, LongInt stat, LongInt long4)
BEGIN
LongInt res;
record UserVc USr;
integer i;
SetLangMode(LangRussian,"RUS",2);
if (SingleUserMode) then 
  begin
  MPr.SerNr = NextSerNr("tMovPlanVc", CurrentDate, -1, false, "");
  end 
else
  begin
  MPr.SerNr = -1;
  end;

tMovPlanVcRecordDuplicate = res; 
RETURN;
END;

global
updating function LongInt tMovPlanVcRecordRemoveTest(var record tMovPlanVc MPr, record tMovPlanVc MP2r, LongInt stat, LongInt long4)
BEGIN
record UserVc USr;

tMovPlanVcRecordRemoveTest = 1;
USr.Code = CurrentUser;
ReadFirstMain(USr, 1, True);
if (not UserCanAction("UnOKAll",True)) then 
  begin
  tMovPlanVcRecordRemoveTest = 0;
  end;
RETURN;
END;

function val tMultiShip(val QtyMov, string ArtCode)
begin
record INVc INr;

INr.Code = ArtCode;
ReadFirstMain(INr, 1, true);
if INr.MultiShip > 0 then
	begin
	if Mod(QtyMov, INr.MultiShip) <> 0 then
		begin
		tMultiShip = (Round(((QtyMov / INr.MultiShip) + 0.5), SetRoundModeD(0)) ) * INr.MultiShip ;
		end
	else
		begin
		tMultiShip = QtyMov;
		end;
	end
else
	begin
	tMultiShip = QtyMov;
	end;
RETURN;
END;

global
function LongInt tMovPlanVcRecordCheck(var record tMovPlanVc MPr, record tMovPlanVc MP2r, LongInt stat, LongInt long4)
BEGIN
LongInt res;
integer insertmode, updatemode, i, QtyMov, QtyC002, QtyA001;
record UserVc USr;
row tMovPlanVc MPrw;
record INVc INr;

SetLangMode(LangRussian, "RUS", 2);
res = 0;     
insertmode = 1;
updatemode = 2;

USr.Code = CurrentUser;
ReadFirstMain(Usr, 1, True);

if (stat <> updatemode) and (MPr.SerNr < 1) then
	begin
	MPr.SerNr = NextSerNr("tMovPlanVc", CurrentDate, -1, false, "");
	end;
	
if (stat == updatemode) and (MPr.SerNr < 1) then
	begin
	res = -1;
	end;

if ((MP2r.OKFlag == 1) and (MPr.OKFlag == 0)) and (not UserCanAction("UnOKAll",True)) then
	begin
	res = -1;
	end;

if (MP2r.OKFlag == 1) and  (not UserCanAction("UnOKAll",True)) then
	begin
	res = -1;
	end;	
	
  
if (MPr.MovFlag == 1) and (MP2r.MovFlag == 0) then
	begin
	for (i = 0; i < MatRowCnt(MPr); i = i + 1)
		begin
		MatRowGet(MPr,i,MPrw); 
		if MPrw.CQty > 0 then
			begin
			QtyC002 = GetStockQty(MPrw.ArtCode, "C002", CurrentDate, false);
			QtyA001 = GetStockQty(MPrw.ArtCode, "A001", CurrentDate, false);
			if nonblank(MPrw.QtyLog) then
				begin
				QtyMov = MPrw.QtyLog;
				if  QtyMov <= QtyC002 then
					begin
					MPrw.QtyMovC = QtyMov;
					MPrw.QtyMov = 0;
					end
				else
					begin
					MPrw.QtyMovC = QtyC002;
					QtyMov = QtyMov - QtyC002;
					if QtyMov <= QtyA001 then
						begin
						MPrw.QtyMov = tMultiShip(QtyMov, MPrw.ArtCode);
						end
					else
						begin
						MPrw.QtyMov = tMultiShip(QtyA001, MPrw.ArtCode);
						end;
					end;
				end;
			if nonblank(MPrw.QtyFil) and blank(MPrw.QtyLog) then
				begin
				QtyMov = MPrw.QtyFil;
				if  QtyMov <= QtyC002 then
					begin
					MPrw.QtyMovC = QtyMov;
					MPrw.QtyMov = 0;
					end
				else
					begin
					MPrw.QtyMovC = QtyC002;
					QtyMov = QtyMov - QtyC002;
					if QtyMov <= QtyA001 then
						begin
						MPrw.QtyMov = tMultiShip(QtyMov, MPrw.ArtCode);
						end
					else
						begin
						MPrw.QtyMov = tMultiShip(QtyA001, MPrw.ArtCode);
						end;
					end;
				end;	
			if nonblank(MPrw.MultiQty) and blank(MPrw.QtyFil) and blank(MPrw.QtyLog) then
				begin
				QtyMov = MPrw.MultiQty;
				if  QtyMov <= QtyC002 then
					begin
					MPrw.QtyMovC = QtyMov;
					MPrw.QtyMov = 0;
					end
				else
					begin 
					MPrw.QtyMovC = QtyC002;
					QtyMov = QtyMov - QtyC002;
					if QtyMov <= QtyA001 then
						begin
						MPrw.QtyMov = tMultiShip(QtyMov, MPrw.ArtCode);
						end
					else
						begin
						MPrw.QtyMov = tMultiShip(QtyA001, MPrw.ArtCode);
						end;
					end;
				end;	
			MatRowPut(MPr,i,MPrw); 	
			end
		else
			begin
				if nonblank(MPrw.QtyLog) then
				begin
				MPrw.QtyMov = MPrw.QtyLog;
				end;
			if nonblank(MPrw.QtyFil) and blank(MPrw.QtyLog) then
				begin
				MPrw.QtyMov = MPrw.QtyFil;
				end;	
			if nonblank(MPrw.MultiQty) and blank(MPrw.QtyFil) and blank(MPrw.QtyLog) then
				begin
				MPrw.QtyMov = MPrw.MultiQty;
				end;	
			MatRowPut(MPr,i,MPrw); 		
			end;
		end;	
	end;
	
  tMovPlanVcRecordCheck = res;
RETURN;
end;


global updating 
function LongInt tMovPlanVcRecordSave(var record tMovPlanVc MPr, record tMovPlanVc MP2r, LongInt stat, LongInt long4)
BEGIN

LongInt res;

tMovPlanVcRecordSave = res;  
RETURN;
end;

global updating 
function LongInt tMovPlanVcRecordUpdate(var record tMovPlanVc MPr, record tMovPlanVc MP2r, LongInt stat, LongInt long4)
BEGIN

LongInt res;

tMovPlanVcRecordUpdate = res;  
RETURN;
end;
