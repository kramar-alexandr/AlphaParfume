external function boolean HasFiscalRows();
external procedure InitOTCheckArray(record OTCheckBlock,Array string,Array string,var Integer);
external function Integer CheckObjsNew(string,string,Array string,Array string,Integer,var string);
external function string 60 AddObjectToObjectList(string,string);
external procedure MulVATIVExecute(string,val,var val,var val,Integer,Integer,roundmode);
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external function Integer ItemPrimaryCostModel(record INVc,var Integer);
external function Integer TRVc_AddRoundOffRow(var record TRVc,val,val,string,Boolean,Boolean,Boolean,val,var val);
external function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external function string 20 FindItemPriceVarianceAcc(string,string,Integer);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Integer GetVATLaw();
external procedure AddEuroCurncyTrRowType(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string,Integer);
external procedure AddEuroTrRowType(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string,Integer);
external procedure PUCalcPerc(val,string,var val);
external function Boolean GetAccName(string,var string,Integer);
external procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);
external function Boolean TransInFiscal(Date);
external function string 255 AddStr(string,string,string);
//
external function Integer GetPUStockAcc(Integer,string,string,string,record AccBlock,Integer,var string,var string,Boolean);
external function Integer GetPUPControlAcc(string,string,Integer,string,string,record AccBlock,Integer,var string,var string,Boolean);


function Integer MakeTransFromPU_Rows(Boolean ovstf,var record TRVc gTRp,record PUVc PUp,record LocationVc Locp,
                                      var val PurSum,var val TotSum)
begin
  LongInt res;
  Integer i,rwcnt;
  row PUVc PUrw;
  string 10 stockacc,purchacc,rwobj;
  record INVc INr;
  Boolean sumupf;
  record CostAccBlock CAb;
  val rs,rs2,vat,t1,t,extra,customsbase;
  val frrate,to1,to2,br1,br2;
  string 255 lvatcode,thelocacc,tstr,errstr;
  string 20 varianceacc,taccnumber,location,locobjstr,stockobjstr;
  record LocationVc Locr;
  Integer primarycostmodel,queuecostmodel;
  Boolean dc1,dc2;
  record AccBlock ARb;
  record APAccBlock APAccRec;
  record BaseCurBlock BaseCurRec;
  roundmode rm;
  Array string 255 otcheckaccs;
  Array string 255 otcheckobjtyps;
  Integer otcheckcnt;
  record OTCheckBlock OTCheckr;
  Boolean initotcheckf;      
  
  res = 0;
  if (ovstf) then begin
    dc1 = false;
    dc2 = true;
  end else begin
    dc1 = true;
    dc2 = false;
  end;
  BlockLoad(CAb);
  BlockLoad(ARb);
  BlockLoad(APAccRec);
  BlockLoad(BaseCurRec);
  sumupf = true;
  if (CAb.CorespondingAccounts!=0) then begin
    sumupf = false;
  end;
  frrate = PUp.FrRate;
  to1 = PUp.ToRateB1;
  to2 = PUp.ToRateB2;
  br1 = PUp.BaseRate1;
  br2 = PUp.BaseRate2;

  rwcnt = MatRowCnt(PUp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PUp,i,PUrw);
    stockacc = "";
    if (ovstf) then begin
      if ((PUrw.stp==3) or (PUrw.ovst==0)) then begin
        goto LSKIPROW;
      end;
    end else begin
      if ((PUrw.stp==3) or (PUrw.ovst!=0)) then begin
        goto LSKIPROW;
      end;
    end;
    INr.Code = PUrw.ArtCode;
    if (ReadFirstItem(PUrw.ArtCode,INr,true,true)==false) then begin
      INr.Objects = "";
      INr.ItemType = 0;
    end;
    if ((INr.ItemType==1) or ((CAb.CostAccForNonStocked!=0) and (INr.ItemType==0 or INr.ItemType==3))) then begin
      rs2 = MulRateToBase1(PUp.CurncyCode,PUrw.UPrice,frrate,to1,to2,br1,br2,SetRoundModeD(5));//HAS TO BE 5
      if (PUp.InclVAT==1) then begin
        if (nonblank(PUrw.VATCode)) then begin
          lvatcode = PUrw.VATCode;
        end else begin
          GetItemVATCode(PUrw.ArtCode,PUp.ExportFlag,lvatcode,false); // To support old Purchase Orders
        end;
        rm = DefaultRoundMode;
        rm.decimals = 5;
        MulVATIVExecute(lvatcode,rs2,vat,t1,PUp.InclVAT,0,rm);
//        MulVATIV(lvatcode,rs2,vat,t1,PUp.InclVAT,0);
        rs2 = rs2 - vat - t1;
        rs2 = Round(rs2,SetRoundModeD(5));
      end;              
      rs = Round(PUrw.Quant*rs2,SetRoundModeD(5));
      rs2 = PUrw.UPrice*PUrw.Quant;
      if (PUp.InclVAT==1) then begin
        if (nonblank(PUrw.VATCode)) then begin
          lvatcode = PUrw.VATCode;
        end else begin
          GetItemVATCode(PUrw.ArtCode,PUp.ExportFlag,lvatcode,false); // To support old Purchase Orders
        end;
        rm = DefaultRoundMode;
        rm.decimals = 5;
        MulVATIVExecute(lvatcode,rs2,vat,t1,PUp.InclVAT,0,rm);
//        MulVATIV(lvatcode,rs2,vat,t1,PUp.InclVAT,0);
        rs2 = rs2 - vat - t1;
        rs2 = Round(rs2,SetRoundModeD(5));
      end;
      extra = blankval;
      t = PUrw.ShipCost*PUrw.Quant;
      extra = extra + t;
      t = PUrw.RowCost1*PUrw.Quant;
      extra = extra + t;
      t = PUrw.RowCost2*PUrw.Quant;
      extra = extra + t;
      t = PUrw.RowCost3*PUrw.Quant;
      extra = extra + t;
      t = PUrw.RowCost4*PUrw.Quant;
      extra = extra + t;
      t = PUrw.RowCost5*PUrw.Quant;
      extra = extra + t;
      PUCalcPerc(rs,PUrw.Extra,t);
      if (Right(PUrw.Extra,1)=="%") then begin
        t = t;
      end else begin
        t = t*PUrw.Quant;
      end;
      extra = extra + t;
      customsbase = rs;
      if (GetVATLaw==25) then begin//vatPolish
        customsbase = customsbase + PUrw.ShipCost;
        customsbase = Round(customsbase,SetRoundModeD(0));
      end;      
      PUCalcPerc(customsbase,PUrw.CustomsCost,t);
      if (Right(PUrw.CustomsCost,1)=="%") then begin
        t = t;
      end else begin
        t = t*PUrw.Quant;
      end;
      extra = extra + t;
      location = PUrw.Location;
      if (blank(location)) then begin
        location = PUp.Location;
      end;
      Locr.Code = location;
      if (ReadFirstMain(Locr,1,true)) then begin
        thelocacc = Locr.StockAcc;
        locobjstr = Locr.Objects;
      end else begin
        thelocacc = Locp.StockAcc;
        locobjstr = Locp.Objects;
      end;
      res = GetPUStockAcc(CAb.ItemGroupAccounts,PUrw.CostAcc,thelocacc,INr.Group,ARb,PUrw.StockType,stockacc,tstr,false);
      if (res!=0) then begin
        goto LMakeTransFromPU_Rows;
      end;
      rwobj = "";
      if (nonblank(PUrw.Objects)) then begin
        rwobj = PUrw.Objects;
      end else begin
//        rwobj = INr.Objects;, I don't think it should be here, it is pasted with item  FindINObjects(INr.Objects,INr.Group);
      end;
      if ((APAccRec.VEObjonPurchAcc!=0) and (nonblank(PUp.Objects))) then begin
        if (APAccRec.SkipObjectsOnVIFromHeader==0) then begin
          rwobj = AddObjectToObjectList(rwobj,PUp.Objects);
        end;
      end;      
      if (initotcheckf==false) then begin
        InitOTCheckArray(OTCheckr,otcheckaccs,otcheckobjtyps,otcheckcnt);
        initotcheckf = true;
      end;
      stockobjstr = AddObjectToObjectList(rwobj,locobjstr);
      res = CheckObjsNew(stockacc,stockobjstr,otcheckaccs,otcheckobjtyps,otcheckcnt,errstr);    
      if (res!=0) then begin
        goto LMakeTransFromPU_Rows;
      end;
      primarycostmodel = ItemPrimaryCostModel(INr,queuecostmodel);
      if (CAb.BookInPriceVariance!=0) and (primarycostmodel==1) and (queuecostmodel!=20) then begin
        if (CheckTTRPerRow("PUVc",stockacc,stockobjstr,dc1,taccnumber,1)) then begin end;      
        t = Round(PUrw.Quant*PUrw.InPrice,SetRoundModeD(2));
        AddEuroCurncyTrRowType(gTRp,stockacc,stockobjstr,"",tstr,t,sumupf,dc1,TotSum,PUp.CurncyCode,frrate,to1,to2,br1,br2,blankval,blankval,-1,false,taccnumber,kTransactionRowTypeStock);

        if (GetAccName(ARb.InPriceVarAcc,tstr,60)==false) then begin
          res = 22048;
          goto LMakeTransFromPU_Rows;
        end;        
        if (CheckTTRPerRow("PUVc",ARb.InPriceVarAcc,rwobj,dc1,taccnumber,1)) then begin end;      
        t = Round(rs+extra,SetRoundModeD(2));
        t = t - Round(PUrw.Quant*PUrw.InPrice,SetRoundModeD(2));
        t = Round(t,SetRoundModeD(2));
        AddEuroCurncyTrRowType(gTRp,ARb.InPriceVarAcc,rwobj,"",tstr,t,sumupf,dc1,TotSum,PUp.CurncyCode,frrate,to1,to2,br1,br2,blankval,blankval,-1,false,taccnumber,kTransactionRowTypeStock);
      end else begin
        if (CheckTTRPerRow("PUVc",stockacc,stockobjstr,dc1,taccnumber,1)) then begin end;      
        t = Round(rs+extra,SetRoundModeD(2));
        AddEuroCurncyTrRowType(gTRp,stockacc,stockobjstr,"",tstr,t,sumupf,dc1,TotSum,PUp.CurncyCode,frrate,to1,to2,br1,br2,blankval,blankval,-1,false,taccnumber,kTransactionRowTypeStock);
/*
cause of rounding diferences between GR an TR 
        if (extra!=0) then begin
          t = blankval;
          if (CheckTTRPerRow("PUVc",stockacc,stockobjstr,dc1,taccnumber,1)) then begin end;      
          AddEuroCurncyTrRowType(gTRp,stockacc,stockobjstr,"",tstr,extra,true,dc1,TotSum,BaseCurRec.BaseCur1,frrate,to1,to2,br1,br2,t,blankval,-1,false,taccnumber,kTransactionRowTypeStock);
        end;
*/
      end;
      res = GetPUPControlAcc(location,PUp.VECode,CAb.ItemGroupAccounts,PUrw.CredAcc,INr.Group,ARb,PUrw.StockType,purchacc,tstr,false);
      if (res!=0) then begin
        goto LMakeTransFromPU_Rows;
      end;
      if (APAccRec.SkipObjectsOnVIFromHeader==0) then begin
        rwobj = AddObjectToObjectList(PUp.Objects,PUrw.Objects);
      end;
      if (ARb.BookPriceVar!=0) then begin
        if (PUrw.VarianceAmount!=0) then begin
          rs = rs + PUrw.VarianceAmount;
        end;
      end;
      if (CheckTTRPerRow("PUVc",purchacc,rwobj,dc2,taccnumber,1)) then begin end;
      t = Round(rs,SetRoundModeD(2));//rs should be rounded here 
      AddEuroCurncyTrRowType(gTRp,purchacc,rwobj,"",tstr,t,sumupf,dc2,TotSum,PUp.CurncyCode,frrate,to1,to2,br1,br2,rs2,blankval,-1,false,taccnumber,kTransactionRowTypeStock);
      if (ARb.BookPriceVar!=0) then begin
        if (PUrw.VarianceAmount!=0) then begin              
          varianceacc = FindItemPriceVarianceAcc(ARb.ItemPriceVar,INr.Group,CAb.ItemGroupAccounts);
          if (GetAccName(varianceacc,tstr,60)==false) then begin
            res = 23172;      
            goto LMakeTransFromPU_Rows;
          end;
          if (CheckTTRPerRow("PUVc",varianceacc,rwobj,dc1,taccnumber,1)) then begin end;      
          AddEuroTrRowType(gTRp,varianceacc,rwobj,"",tstr,PUrw.VarianceAmount,br1,br2,true,dc1,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
        end;
      end;      
////new costacc      
      PurSum = PurSum + rs;
      PurSum = PurSum + extra;
      if (ARb.BookExtraCostPerRow!=0) then begin
        rs2 = MulRateToBase1(PUp.CurncyCode,PUrw.UPrice,PUp.FrRate,PUp.ToRateB1,PUp.ToRateB2,PUp.BaseRate1,PUp.BaseRate2,SetROundModeD(5));
        PUCalcPerc(rs2,PUrw.Extra,rs);//should be in base 1 shouldn't it, PUrw.UPrice
        rs = PUrw.Quant*rs;
        if (rs!=0) then begin
          if (GetAccName(ARb.PUExtraAcc,tstr,60)==false) then begin
            res = 2121;
            goto LMakeTransFromPU_Rows;
          end;
  // The Cost, Freight and Custom are in LOCAL currency
          if (CheckTTRPerRow("PUVc",ARb.PUExtraAcc,rwobj,dc2,taccnumber,0)) then begin end;      
          AddEuroTrRowType(gTRp,ARb.PUExtraAcc,rwobj,"",tstr,rs,br1,br2,true,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
          PurSum = PurSum - rs;
        end;

        rs = PUrw.Quant*PUrw.ShipCost;
        if (rs!=0) then begin
          if (GetAccName(ARb.PUFreightAcc,tstr,60)==false) then begin
            res = 2122;
            goto LMakeTransFromPU_Rows;
          end;
          if (CheckTTRPerRow("PUVc",ARb.PUFreightAcc,rwobj,dc2,taccnumber,0)) then begin end;      
          AddEuroTrRowType(gTRp,ARb.PUFreightAcc,rwobj,"",tstr,rs,br1,br2,true,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
          PurSum = PurSum - rs;
        end;

        rs = PUrw.Quant*PUrw.RowCost1;
        if (rs!=0) then begin
          if (GetAccName(ARb.PUCost1,tstr,60)==false) then begin
            res = 2123;
            goto LMakeTransFromPU_Rows;
          end;
          if (CheckTTRPerRow("PUVc",ARb.PUCost1,rwobj,dc2,taccnumber,0)) then begin end;      
          AddEuroTrRowType(gTRp,ARb.PUCost1,rwobj,"",tstr,rs,br1,br2,true,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
          PurSum = PurSum - rs;
        end;
        rs = PUrw.Quant*PUrw.RowCost2;
        if (rs!=0) then begin
          if (GetAccName(ARb.PUCost2,tstr,60)==false) then begin
            res = 2123;
            goto LMakeTransFromPU_Rows;
          end;
          if (CheckTTRPerRow("PUVc",ARb.PUCost2,rwobj,dc2,taccnumber,0)) then begin end;      
          AddEuroTrRowType(gTRp,ARb.PUCost2,rwobj,"",tstr,rs,br1,br2,true,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
          PurSum = PurSum - rs;
        end;
        rs = PUrw.Quant*PUrw.RowCost3;
        if (rs!=0) then begin
          if (GetAccName(ARb.PUCost3,tstr,60)==false) then begin
            res = 2123;
            goto LMakeTransFromPU_Rows;
          end;
          if (CheckTTRPerRow("PUVc",ARb.PUCost3,rwobj,dc2,taccnumber,0)) then begin end;      
          AddEuroTrRowType(gTRp,ARb.PUCost3,rwobj,"",tstr,rs,br1,br2,true,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
          PurSum = PurSum - rs;
        end;
        rs = PUrw.Quant*PUrw.RowCost4;
        if (rs!=0) then begin
          if (GetAccName(ARb.PUCost4,tstr,60)==false) then begin
            res = 2123;
            goto LMakeTransFromPU_Rows;
          end;
          if (CheckTTRPerRow("PUVc",ARb.PUCost4,rwobj,dc2,taccnumber,0)) then begin end;      
          AddEuroTrRowType(gTRp,ARb.PUCost4,rwobj,"",tstr,rs,br1,br2,true,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
          PurSum = PurSum - rs;
        end;
        rs = PUrw.Quant*PUrw.RowCost5;
        if (rs!=0) then begin
          if (GetAccName(ARb.PUCost5,tstr,60)==false) then begin
            res = 2123;
            goto LMakeTransFromPU_Rows;
          end;
          if (CheckTTRPerRow("PUVc",ARb.PUCost5,rwobj,dc2,taccnumber,0)) then begin end;      
          AddEuroTrRowType(gTRp,ARb.PUCost1,rwobj,"",tstr,rs,br1,br2,true,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
          PurSum = PurSum - rs;
        end;
        PUCalcPerc(customsbase,PUrw.CustomsCost,rs);
        if (Right(PUrw.CustomsCost,1)=="%") then begin
          rs = PUrw.Quant*rs;
        end else begin
          rs = rs*PUrw.Quant;
        end;
        if (rs!=0) then begin
          if (GetAccName(ARb.PUCustomsAcc,tstr,60)==false) then begin
            res = 2128;
            goto LMakeTransFromPU_Rows;
          end;
          if (CheckTTRPerRow("PUVc",ARb.PUCustomsAcc,rwobj,dc2,taccnumber,0)) then begin end;      
          AddEuroTrRowType(gTRp,ARb.PUCustomsAcc,rwobj,"",tstr,rs,br1,br2,true,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
          PurSum = PurSum - rs;
        end;
      end;
    end;
LSKIPROW:;    
  end;
LMakeTransFromPU_Rows:;  
  MakeTransFromPU_Rows = res;
  return;
end;


global
function Integer MakeTransFromPU(record TRVc gTRp,record PUVc PUp,record LocationVc Locp,Boolean rpt)
BEGIN
  Integer res;
  Integer rwcnt;
  Integer i;
  string 255 ftxt,tstr,firstVAT;
  val VATSum;
  val t,rs;
  val frrate,to1,to2,br1,br2;
  row PUVc PUrw;
  Boolean dc1,dc2,sumupf;
  val TotSum,PurSum;
  val rs2,extra;
  string 10 stockacc,purchacc,taccnumber;
  record TRGenBlock TRGenRec;
  record AccBlock ARb;
  val PurSum2;  
  record TRVc lTRr;
  record CostAccBlock CAb;
  record APAccBlock APAccRec;
  record BaseCurBlock BaseCurRec;
  string 60 rwobj;
  transaction string 255 gRuniningMaint;
  string 60 objstr; //INAU


  res = 0;
  if (PUp.Invalid!=0) then begin
    goto LMakeTransFromPU;
  end;
  BlockLoad(ARb);
  BlockLoad(TRGenRec);
  BlockLoad(CAb);
  BlockLoad(APAccRec);
  BlockLoad(BaseCurRec);
  sumupf = true;
  if (CAb.CorespondingAccounts!=0) then begin
    sumupf = false;
  end;
  frrate = PUp.FrRate;
  to1 = PUp.ToRateB1;
  to2 = PUp.ToRateB2;
  br1 = PUp.BaseRate1;
  br2 = PUp.BaseRate2;
  RecordNew(gTRp);
  if (rpt==false) then begin
    if (TRGenRec.PUGenTrans==0) then begin
      res = 0;
      goto LMakeTransFromPU;
    end;
  end;
  if (rpt==false) then begin
    if (nonblankdate(TRGenRec.PUStartDate) and
        (PUp.TransDate<TRGenRec.PUStartDate)) then begin
      res = 0;
      goto LMakeTransFromPU;
    end;
  end;
  if (true) then begin
    gTRp.IntYc = PUYc;
    gTRp.Number = PUp.SerNr;
    gTRp.RefStr = "";
  end;
  if (rpt==false) then begin
    lTRr.IntYc = gTRp.IntYc;
    lTRr.Number = gTRp.Number;
    if (ReadFirstMain(lTRr,2,true)) then begin
      switch (gRuniningMaint) begin
        case "RecalcStockMn":  ;
        otherwise
          res = 1032;
          goto LMakeTransFromPU;
      end;
    end;
  end;
  gTRp.RegDate = CurrentDate;
  gTRp.RegTime = CurrentTime;
  gTRp.TransDate = PUp.TransDate;
  if (TransInFiscal(gTRp.TransDate)==false and HasFiscalRows) then begin
    res = 1075;
    goto LMakeTransFromPU;
  end;
  ftxt = PUp.VECode;
  ftxt = ftxt & " ";
  ftxt = ftxt & PUp.VEName;
  if (blank(PUp.VECode)) then begin
    ftxt = PUp.Comment;
  end;
  if (nonblank(PUp.CurncyCode)) then begin
    ftxt = AddStr(ftxt,PUp.CurncyCode,", ");
    GetFullCurncyRateText(true,tstr,PUp.FrRate,PUp.ToRateB1,PUp.ToRateB2,PUp.BaseRate1,PUp.BaseRate2);
    ftxt = AddStr(ftxt,tstr," ");
  end;
  gTRp.Comment = ftxt;
  TotSum = 0;
  VATSum = 0;
  firstVAT = "";
  dc1 = true;
  dc2 = false;
  extra = 0;
  PurSum = 0;
  PurSum2 = 0;
/* Code not used...
  stockacc = ARb.StockAcc;
  if (nonblank(Locp.Code)) then begin
    if (nonblank(Locp.StockAcc)) then begin
      stockacc = Locp.StockAcc;
    end;
  end;
*/
/*not needed here, we might use another stock acc
  if (GetAccName(stockacc,tstr,60)==false) then begin
    res = 2120;
    goto LMakeTransFromPU;
  end;
*/
  res = MakeTransFromPU_Rows(false,gTRp,PUp,Locp,PurSum,TotSum);
  if (res!=0) then begin
    goto LMakeTransFromPU;
  end;
  if (ARb.BookExtraCostPerRow==0) then begin
    rs = PUp.ExtraCost;
    if (rs!=0) then begin
      if (GetAccName(ARb.PUExtraAcc,tstr,60)==false) then begin
        res = 2121;
        goto LMakeTransFromPU;
      end;
  // The Cost, Freight and Custom are in LOCAL currency
      if (CheckTTRPerRow("PUVc",ARb.PUExtraAcc,"",dc2,taccnumber,0)) then begin end;
      AddEuroTrRowType(gTRp,ARb.PUExtraAcc,"","",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
      PurSum = PurSum - rs;
    end;


//=== Modif. 20.05.10 INAU ===
    rs = PUp.ShipCost;
    if (rs!=0) then
      begin
        if nonblank(PUp.FreightCode) and nonblank(PUp.CMRText) then //Если код не пустой - счет 639, иначе 631
          begin
            if not GetAccName(ARb.PUFreightAcc,tstr,60) then
              begin
              res = 2122;
              goto LMakeTransFromPU;
              end;
            objstr = PUp.Objects & "," & PUp.CMRText;
            CheckTTRPerRow("PUVc",ARb.PUFreightAcc, objstr, dc2,taccnumber,0);
            AddEuroTrRowType(gTRp,ARb.PUFreightAcc, objstr, "",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
          end
        else
          begin
            if not GetAccName(ARb.PurchAcc,tstr,60) then
              begin
              res = 2122;
              goto LMakeTransFromPU;
              end;
            CheckTTRPerRow("PUVc",ARb.PurchAcc,PUp.Objects,dc2,taccnumber,0);
            AddEuroTrRowType(gTRp,ARb.PurchAcc,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
          end;
//      if (CheckTTRPerRow("PUVc",ARb.PUFreightAcc,PUp.Objects,dc2,taccnumber,0)) then begin end;
//      AddEuroTrRowType(gTRp,ARb.PUFreightAcc,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
        PurSum = PurSum - rs;
      end;
//=== End Modif. ===

    rs = PUp.Cost1;
    if (rs!=0) then begin
      if (GetAccName(ARb.PUCost1,tstr,60)==false) then begin
        res = 2123;
        goto LMakeTransFromPU;
      end;
      if (CheckTTRPerRow("PUVc",ARb.PUCost1,PUp.Objects,dc2,taccnumber,0)) then begin end;
      AddEuroTrRowType(gTRp,ARb.PUCost1,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
      PurSum = PurSum - rs;
    end;
    rs = PUp.Cost2;
    if (rs!=0) then begin
      if (GetAccName(ARb.PUCost2,tstr,60)==false) then begin
        res = 2124;
        goto LMakeTransFromPU;
      end;
      if (CheckTTRPerRow("PUVc",ARb.PUCost2,PUp.Objects,dc2,taccnumber,0)) then begin end;
      AddEuroTrRowType(gTRp,ARb.PUCost2,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
      PurSum = PurSum - rs;
    end;
    rs = PUp.Cost3;
    if (rs!=0) then begin
      if (GetAccName(ARb.PUCost3,tstr,60)==false) then begin
        res = 2125;
        goto LMakeTransFromPU;
      end;
      if (CheckTTRPerRow("PUVc",ARb.PUCost3,PUp.Objects,dc2,taccnumber,0)) then begin end;
      AddEuroTrRowType(gTRp,ARb.PUCost3,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
      PurSum = PurSum - rs;
    end;
    rs = PUp.Cost4;
    if (rs!=0) then begin
      if (GetAccName(ARb.PUCost4,tstr,60)==false) then begin
        res = 2126;
        goto LMakeTransFromPU;
      end;
      if (CheckTTRPerRow("PUVc",ARb.PUCost4,PUp.Objects,dc2,taccnumber,0)) then begin end;
      AddEuroTrRowType(gTRp,ARb.PUCost4,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
      PurSum = PurSum - rs;
    end;
    rs = PUp.Cost5;
    if (rs!=0) then begin
      if (GetAccName(ARb.PUCost5,tstr,60)==false) then begin
        res = 2127;
        goto LMakeTransFromPU;
      end;
      if (CheckTTRPerRow("PUVc",ARb.PUCost5,PUp.Objects,dc2,taccnumber,0)) then begin end;
      AddEuroTrRowType(gTRp,ARb.PUCost5,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
      PurSum = PurSum - rs;
    end;
    rs = PUp.CustomsCost;
    if (rs!=0) then begin
      if (GetAccName(ARb.PUCustomsAcc,tstr,60)==false) then begin
        res = 2128;
        goto LMakeTransFromPU;
      end;
      if (CheckTTRPerRow("PUVc",ARb.PUCustomsAcc,PUp.Objects,dc2,taccnumber,0)) then begin end;
//      AddEuroTrRowType(gTRp,ARb.PUCustomsAcc,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);

      if nonblank(PUp.CustomsObj) then
        begin
        objstr = "," & PUp.CustomsObj;
        end
      else
        begin
        objstr = "";
        end;

      AddEuroTrRowType(gTRp,ARb.PUCustomsAcc,PUp.Objects & objstr,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);

      PurSum = PurSum - rs;
    end;
  end;

  rs = PUp.ShipCostRound + PUp.CustomsCostRound + PUp.Cost1Round + PUp.Cost2Round + PUp.Cost3Round + PUp.Cost4Round + PUp.Cost5Round;
  rs = Round(rs,DefaultRoundMode);
  if (rs!=0) then begin
    rs2 = MulRateToBase1(PUp.CurncyCode,rs,frrate,to1,to2,br1,br2,SetRoundModeD(5));
    res = GetPUStockAcc(0,"",Locp.StockAcc,"",ARb,0,stockacc,tstr,false);
    if (res!=0) then begin
      goto LMakeTransFromPU;
    end;
    rwobj = "";
    if ((APAccRec.VEObjonPurchAcc!=0) and (nonblank(PUp.Objects))) then begin
      rwobj = PUp.Objects;
    end;      
    if (CheckTTRPerRow("PUVc",stockacc,rwobj,dc1,taccnumber,0)) then begin end;      
    AddEuroCurncyTrRowType(gTRp,stockacc,rwobj,"",tstr,rs,sumupf,dc1,TotSum,PUp.CurncyCode,frrate,to1,to2,br1,br2,rs2,blankval,-1,false,taccnumber,kTransactionRowTypeStock);
  end;
  rs = PUp.ShipCostRound;
  rs = Round(rs,DefaultRoundMode);
  if (rs!=0) then begin
    if (GetAccName(ARb.FreightPriceVar,tstr,60)==false) then begin
      res = 20930;
      goto LMakeTransFromPU;
    end;
    if (CheckTTRPerRow("PUVc",ARb.FreightPriceVar,PUp.Objects,dc2,taccnumber,0)) then begin end;      
    AddEuroTrRowType(gTRp,ARb.FreightPriceVar,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
  end;
  rs = PUp.CustomsCostRound;
  rs = Round(rs,DefaultRoundMode);
  if (rs!=0) then begin
    if (GetAccName(ARb.CustomsPriceVar,tstr,60)==false) then begin
      res = 20931;
      goto LMakeTransFromPU;
    end;
    if (CheckTTRPerRow("PUVc",ARb.CustomsPriceVar,PUp.Objects,dc2,taccnumber,0)) then begin end;      
    AddEuroTrRowType(gTRp,ARb.CustomsPriceVar,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
  end;
  rs = PUp.Cost1Round;
  rs = Round(rs,DefaultRoundMode);
  if (rs!=0) then begin
    if (GetAccName(ARb.Cost1PriceVar,tstr,60)==false) then begin
      res = 20932;
      goto LMakeTransFromPU;
    end;
    if (CheckTTRPerRow("PUVc",ARb.Cost1PriceVar,PUp.Objects,dc2,taccnumber,0)) then begin end;      
    AddEuroTrRowType(gTRp,ARb.Cost1PriceVar,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
  end;
  rs = PUp.Cost2Round;
  rs = Round(rs,DefaultRoundMode);
  if (rs!=0) then begin
    if (GetAccName(ARb.Cost2PriceVar,tstr,60)==false) then begin
      res = 20933;
      goto LMakeTransFromPU;
    end;
    if (CheckTTRPerRow("PUVc",ARb.Cost2PriceVar,PUp.Objects,dc2,taccnumber,0)) then begin end;      
    AddEuroTrRowType(gTRp,ARb.Cost2PriceVar,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
  end;
  rs = PUp.Cost3Round;
  rs = Round(rs,DefaultRoundMode);
  if (rs!=0) then begin
    if (GetAccName(ARb.Cost3PriceVar,tstr,60)==false) then begin
      res = 20934;
      goto LMakeTransFromPU;
    end;
    if (CheckTTRPerRow("PUVc",ARb.Cost3PriceVar,PUp.Objects,dc2,taccnumber,0)) then begin end;      
    AddEuroTrRowType(gTRp,ARb.Cost3PriceVar,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
  end;
  rs = PUp.Cost4Round;
  rs = Round(rs,DefaultRoundMode);
  if (rs!=0) then begin
    if (GetAccName(ARb.Cost4PriceVar,tstr,60)==false) then begin
      res = 20935;
      goto LMakeTransFromPU;
    end;
    if (CheckTTRPerRow("PUVc",ARb.Cost4PriceVar,PUp.Objects,dc2,taccnumber,0)) then begin end;      
    AddEuroTrRowType(gTRp,ARb.Cost4PriceVar,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
  end;
  rs = PUp.Cost5Round;
  rs = Round(rs,DefaultRoundMode);
  if (rs!=0) then begin
    if (GetAccName(ARb.Cost5PriceVar,tstr,60)==false) then begin
      res = 20936;
      goto LMakeTransFromPU;
    end;
    if (CheckTTRPerRow("PUVc",ARb.Cost5PriceVar,PUp.Objects,dc2,taccnumber,0)) then begin end;      
    AddEuroTrRowType(gTRp,ARb.Cost5PriceVar,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
  end;

  /*//new costacc
  PurSum = PurSum - PurSum2;
  rs = PurSum;
  if (rs!=0) then begin
    if (GetAccName(ARb.PurchAcc,tstr,60)==false) then begin
      res = 2129;
      goto LMakeTransFromPU;
    end;
// The PurSum is in Local Currency therefore there is no correct way to make a correct currency booking 
    AddEuroTrRowType(gTRp,ARb.PurchAcc,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,"","","",kTransactionRowTypeStock);
  end;
  *///new costacc
  res = TRVc_AddRoundOffRow(gTRp,br1,br2,"",false,false,false,TotSum,TotSum);
  if (res!=0) then begin
    goto LMakeTransFromPU;
  end;
  res = 0;
LMakeTransFromPU:;
  MakeTransFromPU = res;
  RETURN; 
END;
